{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Clinical Trials Portal\n\n## Overview\n\nThis is a full-stack web application for managing and displaying clinical trials data, built for AstraZeneca. The application provides a modern, responsive interface for browsing clinical trials with advanced filtering and search capabilities. It features a React frontend with a comprehensive design system, an Express.js backend API, and PostgreSQL database integration through Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built using modern React with TypeScript, implementing a component-based architecture:\n\n- **Framework**: React 18 with TypeScript for type safety and developer experience\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Custom design system built on Radix UI primitives with Tailwind CSS\n- **Component Library**: Comprehensive shadcn/ui component library for consistent design patterns\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe frontend follows a modular structure with reusable components, custom hooks, and a well-organized file structure separating UI components, pages, and utilities.\n\n### Backend Architecture\nThe server-side implements a RESTful API architecture:\n\n- **Framework**: Express.js with TypeScript for robust server-side development\n- **API Design**: RESTful endpoints following standard HTTP conventions\n- **Data Layer**: Abstracted storage interface allowing for flexible data persistence strategies\n- **Development Storage**: In-memory storage implementation with sample data for development\n- **Error Handling**: Centralized error handling middleware for consistent API responses\n- **Request Logging**: Comprehensive request/response logging for debugging and monitoring\n\n### Data Storage Solutions\nThe application is designed for PostgreSQL integration with flexible storage abstractions:\n\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Database**: PostgreSQL with Neon serverless integration for scalable cloud deployment\n- **Schema Management**: Code-first approach with Drizzle migrations and type generation\n- **Validation**: Zod schemas for runtime type validation and data integrity\n- **Storage Interface**: Abstract storage layer supporting multiple implementations (memory, database)\n\n### Authentication and Authorization\nThe application includes infrastructure for user management:\n\n- **User Schema**: Defined user entity with username/password authentication\n- **Session Management**: PostgreSQL session store integration for persistent sessions\n- **Security**: Password hashing and secure session handling (implementation pending)\n\n### Design System and Styling\nComprehensive design system built for healthcare/pharmaceutical branding:\n\n- **CSS Framework**: Tailwind CSS with custom AstraZeneca brand colors and design tokens\n- **Component System**: Complete shadcn/ui integration with customized theming\n- **Typography**: Professional font stack including Inter and custom Google Fonts\n- **Responsive Design**: Mobile-first responsive design patterns throughout\n- **Accessibility**: ARIA-compliant components and keyboard navigation support\n\n### Development Experience\nOptimized development workflow and tooling:\n\n- **Type Safety**: Full TypeScript coverage across client, server, and shared code\n- **Code Quality**: ESLint and Prettier for consistent code formatting\n- **Development Server**: Vite dev server with HMR and Express integration\n- **Build Process**: Optimized production builds with code splitting and asset optimization\n- **Path Aliases**: Configured import aliases for clean, maintainable code organization\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Query for frontend state management\n- **Express.js**: Web framework for Node.js backend API development\n- **TypeScript**: Type safety across the entire application stack\n\n### Database and ORM\n- **Drizzle ORM**: Modern TypeScript ORM for database operations and migrations\n- **Drizzle Kit**: CLI tools for schema management and database migrations\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for cloud deployment\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI and Design System\n- **Radix UI**: Comprehensive collection of accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **shadcn/ui**: Pre-built component library built on Radix UI and Tailwind\n- **Lucide React**: Modern icon library with consistent design language\n- **class-variance-authority**: Utility for creating type-safe CSS class variants\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server with React plugin support\n- **esbuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n- **@replit/vite-plugins**: Replit-specific development tools and error handling\n\n### Form Management and Validation\n- **React Hook Form**: Performant forms library with minimal re-renders\n- **@hookform/resolvers**: Validation resolvers for form schema integration\n- **Zod**: TypeScript-first schema validation library\n\n### Additional Utilities\n- **wouter**: Lightweight React router alternative\n- **date-fns**: Modern JavaScript date utility library\n- **clsx**: Utility for constructing className strings conditionally\n- **cmdk**: Command palette component for enhanced user interaction\n- **embla-carousel-react**: Touch-friendly carousel component library","size_bytes":5753},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // AstraZeneca Brand Colors\n        \"az-magenta\": \"var(--az-magenta)\",\n        \"az-gold\": \"var(--az-gold)\",\n        \"phase-1\": \"var(--phase-1)\",\n        \"phase-2\": \"var(--phase-2)\",\n        \"phase-3\": \"var(--phase-3)\",\n        \"phase-4\": \"var(--phase-4)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3070},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all clinical trials\n  app.get(\"/api/clinical-trials\", async (req, res) => {\n    try {\n      const trials = await storage.getAllClinicalTrials();\n      res.json(trials);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clinical trials\" });\n    }\n  });\n\n  // Get specific clinical trial\n  app.get(\"/api/clinical-trials/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const trial = await storage.getClinicalTrial(id);\n      \n      if (!trial) {\n        return res.status(404).json({ message: \"Clinical trial not found\" });\n      }\n      \n      res.json(trial);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clinical trial\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":995},"server/storage.ts":{"content":"import { type User, type InsertUser, type ClinicalTrial, type InsertClinicalTrial } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllClinicalTrials(): Promise<ClinicalTrial[]>;\n  getClinicalTrial(id: string): Promise<ClinicalTrial | undefined>;\n  createClinicalTrial(trial: InsertClinicalTrial): Promise<ClinicalTrial>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private clinicalTrials: Map<string, ClinicalTrial>;\n\n  constructor() {\n    this.users = new Map();\n    this.clinicalTrials = new Map();\n    \n    // Initialize with sample clinical trials data\n    this.initializeClinicalTrials();\n  }\n\n  private async initializeClinicalTrials() {\n    const sampleTrials: InsertClinicalTrial[] = [\n      {\n        title: \"Novel Oncology Treatment for Advanced Lung Cancer\",\n        diseaseArea: \"Oncology\",\n        phase: \"Phase I\",\n        recruitmentStatus: \"Actively Recruiting\",\n        primarySite: \"Memorial Sloan Kettering, New York\",\n        description: \"Investigating a novel targeted therapy for patients with advanced non-small cell lung cancer.\"\n      },\n      {\n        title: \"Cardiovascular Prevention Study with Innovative Therapy\",\n        diseaseArea: \"Cardiovascular\",\n        phase: \"Phase II\",\n        recruitmentStatus: \"Screening\",\n        primarySite: \"Mayo Clinic, Minnesota\",\n        description: \"Evaluating the efficacy of a new cardiovascular prevention therapy in high-risk patients.\"\n      },\n      {\n        title: \"Diabetes Management with Next-Generation Treatment\",\n        diseaseArea: \"Endocrinology\",\n        phase: \"Phase III\",\n        recruitmentStatus: \"Actively Recruiting\",\n        primarySite: \"Joslin Diabetes Center, Boston\",\n        description: \"Large-scale study of an innovative diabetes management approach for Type 2 diabetes patients.\"\n      },\n      {\n        title: \"Long-term Safety Study for Respiratory Disease Treatment\",\n        diseaseArea: \"Respiratory\",\n        phase: \"Phase IV\",\n        recruitmentStatus: \"Not Recruiting\",\n        primarySite: \"Cleveland Clinic, Ohio\",\n        description: \"Post-market surveillance study evaluating long-term safety of respiratory disease treatment.\"\n      },\n      {\n        title: \"Immunotherapy Approach for Rare Disease Treatment\",\n        diseaseArea: \"Rare Diseases\",\n        phase: \"Phase I\",\n        recruitmentStatus: \"Starting Soon\",\n        primarySite: \"NIH Clinical Center, Maryland\",\n        description: \"First-in-human study of immunotherapy approach for patients with rare genetic disorders.\"\n      },\n      {\n        title: \"Neurological Disorder Treatment with Advanced Therapeutics\",\n        diseaseArea: \"Neurology\",\n        phase: \"Phase III\",\n        recruitmentStatus: \"Actively Recruiting\",\n        primarySite: \"Johns Hopkins, Baltimore\",\n        description: \"Phase III trial evaluating advanced therapeutics for neurodegenerative disorders.\"\n      },\n      {\n        title: \"Breakthrough Therapy for Autoimmune Disease Management\",\n        diseaseArea: \"Immunology\",\n        phase: \"Phase II\",\n        recruitmentStatus: \"Screening\",\n        primarySite: \"Stanford Medicine, California\",\n        description: \"Clinical trial investigating breakthrough therapy for autoimmune disease management.\"\n      },\n      {\n        title: \"Precision Medicine Approach for Pediatric Cancer\",\n        diseaseArea: \"Pediatric Oncology\",\n        phase: \"Phase I/II\",\n        recruitmentStatus: \"Actively Recruiting\",\n        primarySite: \"Children's Hospital, Philadelphia\",\n        description: \"Precision medicine study for pediatric cancer patients using targeted therapeutic approaches.\"\n      }\n    ];\n\n    for (const trial of sampleTrials) {\n      await this.createClinicalTrial(trial);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllClinicalTrials(): Promise<ClinicalTrial[]> {\n    return Array.from(this.clinicalTrials.values());\n  }\n\n  async getClinicalTrial(id: string): Promise<ClinicalTrial | undefined> {\n    return this.clinicalTrials.get(id);\n  }\n\n  async createClinicalTrial(insertTrial: InsertClinicalTrial): Promise<ClinicalTrial> {\n    const id = randomUUID();\n    const trial: ClinicalTrial = { ...insertTrial, id };\n    this.clinicalTrials.set(id, trial);\n    return trial;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4943},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const clinicalTrials = pgTable(\"clinical_trials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  diseaseArea: text(\"disease_area\").notNull(),\n  phase: text(\"phase\").notNull(),\n  recruitmentStatus: text(\"recruitment_status\").notNull(),\n  primarySite: text(\"primary_site\").notNull(),\n  description: text(\"description\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertClinicalTrialSchema = createInsertSchema(clinicalTrials).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertClinicalTrial = z.infer<typeof insertClinicalTrialSchema>;\nexport type ClinicalTrial = typeof clinicalTrials.$inferSelect;\n","size_bytes":1221},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Eligibility from \"@/pages/eligibility\";\nimport Registration from \"@/pages/registration\";\nimport MedicalInfo from \"@/pages/medical-info\";\nimport AppointmentBooking from \"@/pages/appointment-booking\";\nimport Dashboard from \"@/pages/dashboard\";\nimport InvestigatorDashboard from \"@/pages/investigator-dashboard\";\nimport TrialDetail from \"@/pages/trial-detail\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/trial/:id\" component={TrialDetail} />\n      <Route path=\"/eligibility\" component={Eligibility} />\n      <Route path=\"/registration\" component={Registration} />\n      <Route path=\"/medical-info\" component={MedicalInfo} />\n      <Route path=\"/appointment-booking\" component={AppointmentBooking} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/investigator-dashboard\" component={InvestigatorDashboard} />\n      <Route path=\"/login\" component={Login} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1600},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* AstraZeneca Brand Colors */\n  --az-magenta: hsl(326 100% 27%);\n  --az-gold: hsl(43 100% 47%);\n  --phase-1: hsl(326 100% 27%);\n  --phase-2: hsl(239 84% 67%);\n  --phase-3: hsl(43 100% 47%);\n  --phase-4: hsl(160 84% 39%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":5403},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/appointment-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface AppointmentCalendarProps {\n  onDateSelect: (date: string) => void;\n  selectedDate: string;\n}\n\nexport default function AppointmentCalendar({ onDateSelect, selectedDate }: AppointmentCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const today = new Date();\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n\n  // Get first day of month and number of days\n  const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n  const firstDayOfWeek = firstDayOfMonth.getDay();\n  const daysInMonth = lastDayOfMonth.getDate();\n\n  // Available slots (yellow highlights) - mock data\n  const availableSlots = new Set([\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 1).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 2).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 5).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 7).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 8).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 12).padStart(2, '0')}`,\n    `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(today.getDate() + 14).padStart(2, '0')}`\n  ]);\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(currentYear, currentMonth - 1, 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentYear, currentMonth + 1, 1));\n  };\n\n  const formatDateString = (day: number) => {\n    return `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n  };\n\n  const isDateAvailable = (day: number) => {\n    const dateString = formatDateString(day);\n    return availableSlots.has(dateString);\n  };\n\n  const isDatePast = (day: number) => {\n    const date = new Date(currentYear, currentMonth, day);\n    return date < today;\n  };\n\n  const isDateSelected = (day: number) => {\n    const dateString = formatDateString(day);\n    return selectedDate === dateString;\n  };\n\n  const handleDateClick = (day: number) => {\n    if (isDatePast(day) || !isDateAvailable(day)) return;\n    const dateString = formatDateString(day);\n    onDateSelect(dateString);\n  };\n\n  // Create calendar grid\n  const calendarDays = [];\n  \n  // Empty cells for days before the first day of the month\n  for (let i = 0; i < firstDayOfWeek; i++) {\n    calendarDays.push(\n      <div key={`empty-${i}`} className=\"h-10 flex items-center justify-center\">\n        {/* Empty cell */}\n      </div>\n    );\n  }\n\n  // Days of the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    const isPast = isDatePast(day);\n    const isAvailable = isDateAvailable(day);\n    const isSelected = isDateSelected(day);\n\n    let dayClass = \"h-10 flex items-center justify-center text-sm font-medium rounded-lg cursor-pointer transition-colors \";\n    \n    if (isPast) {\n      dayClass += \"text-gray-400 cursor-not-allowed\";\n    } else if (isSelected) {\n      dayClass += \"bg-az-magenta text-white\";\n    } else if (isAvailable) {\n      dayClass += \"bg-az-gold text-az-magenta hover:bg-yellow-400\";\n    } else {\n      dayClass += \"text-gray-600 hover:bg-gray-100\";\n    }\n\n    calendarDays.push(\n      <div\n        key={day}\n        className={dayClass}\n        onClick={() => handleDateClick(day)}\n      >\n        {day}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          {monthNames[currentMonth]} {currentYear}\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={previousMonth}\n            className=\"w-8 h-8 p-0\"\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={nextMonth}\n            className=\"w-8 h-8 p-0\"\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Day Names */}\n      <div className=\"grid grid-cols-7 gap-1\">\n        {dayNames.map(day => (\n          <div key={day} className=\"h-8 flex items-center justify-center text-xs font-medium text-gray-500\">\n            {day}\n          </div>\n        ))}\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-7 gap-1\">\n        {calendarDays}\n      </div>\n\n      {/* Legend */}\n      <div className=\"flex items-center justify-center space-x-6 text-xs text-gray-600 pt-4\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-4 h-4 bg-az-gold rounded\"></div>\n          <span>Available</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-4 h-4 bg-az-magenta rounded\"></div>\n          <span>Selected</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-4 h-4 bg-gray-200 rounded\"></div>\n          <span>Unavailable</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5827},"client/src/components/clinical-trials-grid.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport TrialCard from \"./trial-card\";\nimport { ClinicalTrial } from \"@shared/schema\";\n\nexport default function ClinicalTrialsGrid() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [phaseFilter, setPhaseFilter] = useState(\"all\");\n  const [locationFilter, setLocationFilter] = useState(\"all\");\n\n  const { data: trials, isLoading, error } = useQuery<ClinicalTrial[]>({\n    queryKey: [\"/api/clinical-trials\"],\n  });\n\n  // Filter trials based on search and filters\n  const filteredTrials = trials?.filter((trial) => {\n    const matchesSearch = \n      trial.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      trial.diseaseArea.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      trial.primarySite.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesPhase = phaseFilter === \"all\" || trial.phase === phaseFilter;\n    \n    const matchesLocation = locationFilter === \"all\" || \n      trial.primarySite.toLowerCase().includes(locationFilter.toLowerCase());\n\n    return matchesSearch && matchesPhase && matchesLocation;\n  });\n\n  if (error) {\n    return (\n      <section className=\"py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Clinical Trials</h3>\n            <p className=\"text-gray-600\">Unable to load clinical trials data. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 lg:py-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        {/* Section Header */}\n        <div className=\"text-center mb-12\">\n          <h3 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Current Clinical Trials</h3>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Explore our comprehensive portfolio of clinical studies across multiple therapeutic areas, \n            designed to bring innovative treatments to patients worldwide.\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"mb-12 bg-white rounded-2xl shadow-lg p-6 lg:p-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4 lg:gap-6\">\n            <div className=\"flex-1\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search trials by condition, drug name, or keywords...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-az-magenta focus:ring-0 outline-none transition-colors\"\n              />\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Select value={phaseFilter} onValueChange={setPhaseFilter}>\n                <SelectTrigger className=\"px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-az-magenta\">\n                  <SelectValue placeholder=\"All Phases\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Phases</SelectItem>\n                  <SelectItem value=\"Phase I\">Phase I</SelectItem>\n                  <SelectItem value=\"Phase II\">Phase II</SelectItem>\n                  <SelectItem value=\"Phase III\">Phase III</SelectItem>\n                  <SelectItem value=\"Phase IV\">Phase IV</SelectItem>\n                  <SelectItem value=\"Phase I/II\">Phase I/II</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-az-magenta\">\n                  <SelectValue placeholder=\"All Locations\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  <SelectItem value=\"north america\">North America</SelectItem>\n                  <SelectItem value=\"europe\">Europe</SelectItem>\n                  <SelectItem value=\"asia pacific\">Asia Pacific</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Button \n                className=\"bg-az-magenta hover:bg-pink-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors duration-200\"\n                onClick={() => {\n                  // Filter button is reactive, no need for explicit action\n                }}\n              >\n                Filter\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Clinical Trials Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 lg:gap-8\">\n            {Array.from({ length: 8 }).map((_, index) => (\n              <div key={index} className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <Skeleton className=\"h-6 w-20 mb-4\" />\n                <Skeleton className=\"h-6 w-full mb-3\" />\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-4 w-32 mb-4\" />\n                <Skeleton className=\"h-4 w-28 mb-2\" />\n                <Skeleton className=\"h-4 w-36 mb-6\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n            ))}\n          </div>\n        ) : filteredTrials && filteredTrials.length > 0 ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 lg:gap-8\">\n              {filteredTrials.map((trial) => (\n                <TrialCard key={trial.id} trial={trial} />\n              ))}\n            </div>\n            \n            {/* Load More */}\n            <div className=\"text-center mt-12\">\n              <Button \n                variant=\"outline\"\n                className=\"border-2 border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white px-8 py-3 rounded-xl font-semibold transition-all duration-200 hover:shadow-lg\"\n              >\n                Load More Trials\n              </Button>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-12\">\n            <h4 className=\"text-xl font-semibold text-gray-600 mb-2\">No trials found</h4>\n            <p className=\"text-gray-500\">Try adjusting your search criteria or filters.</p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":6819},"client/src/components/demographics-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowRight } from \"lucide-react\";\nimport { RegistrationData } from \"@/pages/registration\";\n\ninterface DemographicsFormProps {\n  onNext: () => void;\n  formData: Partial<RegistrationData>;\n  setFormData: (data: Partial<RegistrationData>) => void;\n}\n\nexport default function DemographicsForm({ onNext, formData, setFormData }: DemographicsFormProps) {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validate = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.firstName?.trim()) {\n      newErrors.firstName = \"First name is required\";\n    }\n\n    if (!formData.lastName?.trim()) {\n      newErrors.lastName = \"Last name is required\";\n    }\n\n    if (!formData.email?.trim()) {\n      newErrors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \"Please enter a valid email address\";\n    }\n\n    if (!formData.phone?.trim()) {\n      newErrors.phone = \"Phone number is required\";\n    }\n\n    if (!formData.dateOfBirth) {\n      newErrors.dateOfBirth = \"Date of birth is required\";\n    }\n\n    if (!formData.gender) {\n      newErrors.gender = \"Gender is required\";\n    }\n\n    if (!formData.address?.trim()) {\n      newErrors.address = \"Address is required\";\n    }\n\n    if (!formData.emergencyContact?.trim()) {\n      newErrors.emergencyContact = \"Emergency contact name is required\";\n    }\n\n    if (!formData.emergencyPhone?.trim()) {\n      newErrors.emergencyPhone = \"Emergency contact phone is required\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validate()) {\n      onNext();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700\">\n            First Name *\n          </Label>\n          <Input\n            id=\"firstName\"\n            placeholder=\"Enter your first name\"\n            value={formData.firstName || \"\"}\n            onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n            className={`mt-1 ${errors.firstName ? 'border-red-500' : ''}`}\n          />\n          {errors.firstName && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.firstName}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-gray-700\">\n            Last Name *\n          </Label>\n          <Input\n            id=\"lastName\"\n            placeholder=\"Enter your last name\"\n            value={formData.lastName || \"\"}\n            onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n            className={`mt-1 ${errors.lastName ? 'border-red-500' : ''}`}\n          />\n          {errors.lastName && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.lastName}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n            Email Address *\n          </Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"Enter your email address\"\n            value={formData.email || \"\"}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n            className={`mt-1 ${errors.email ? 'border-red-500' : ''}`}\n          />\n          {errors.email && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700\">\n            Phone Number *\n          </Label>\n          <Input\n            id=\"phone\"\n            type=\"tel\"\n            placeholder=\"Enter your phone number\"\n            value={formData.phone || \"\"}\n            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n            className={`mt-1 ${errors.phone ? 'border-red-500' : ''}`}\n          />\n          {errors.phone && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.phone}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div>\n          <Label htmlFor=\"dateOfBirth\" className=\"text-sm font-medium text-gray-700\">\n            Date of Birth *\n          </Label>\n          <Input\n            id=\"dateOfBirth\"\n            type=\"date\"\n            value={formData.dateOfBirth || \"\"}\n            onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n            className={`mt-1 ${errors.dateOfBirth ? 'border-red-500' : ''}`}\n          />\n          {errors.dateOfBirth && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.dateOfBirth}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"gender\" className=\"text-sm font-medium text-gray-700\">\n            Gender *\n          </Label>\n          <Select \n            value={formData.gender || \"\"} \n            onValueChange={(value) => setFormData({ ...formData, gender: value })}\n          >\n            <SelectTrigger className={`mt-1 ${errors.gender ? 'border-red-500' : ''}`}>\n              <SelectValue placeholder=\"Select gender\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"female\">Female</SelectItem>\n              <SelectItem value=\"male\">Male</SelectItem>\n              <SelectItem value=\"non-binary\">Non-binary</SelectItem>\n              <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.gender && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.gender}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"ethnicity\" className=\"text-sm font-medium text-gray-700\">\n            Ethnicity (Optional)\n          </Label>\n          <Select \n            value={formData.ethnicity || \"\"} \n            onValueChange={(value) => setFormData({ ...formData, ethnicity: value })}\n          >\n            <SelectTrigger className=\"mt-1\">\n              <SelectValue placeholder=\"Select ethnicity\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"hispanic-latino\">Hispanic or Latino</SelectItem>\n              <SelectItem value=\"white\">White</SelectItem>\n              <SelectItem value=\"black-african-american\">Black or African American</SelectItem>\n              <SelectItem value=\"asian\">Asian</SelectItem>\n              <SelectItem value=\"american-indian-alaska-native\">American Indian or Alaska Native</SelectItem>\n              <SelectItem value=\"native-hawaiian-pacific-islander\">Native Hawaiian or Other Pacific Islander</SelectItem>\n              <SelectItem value=\"two-or-more-races\">Two or More Races</SelectItem>\n              <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700\">\n          Address *\n        </Label>\n        <Textarea\n          id=\"address\"\n          placeholder=\"Enter your full address\"\n          value={formData.address || \"\"}\n          onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n          className={`mt-1 ${errors.address ? 'border-red-500' : ''}`}\n          rows={3}\n        />\n        {errors.address && (\n          <p className=\"text-red-500 text-sm mt-1\">{errors.address}</p>\n        )}\n      </div>\n\n      <div className=\"border-t pt-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">Emergency Contact</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"emergencyContact\" className=\"text-sm font-medium text-gray-700\">\n              Emergency Contact Name *\n            </Label>\n            <Input\n              id=\"emergencyContact\"\n              placeholder=\"Enter emergency contact name\"\n              value={formData.emergencyContact || \"\"}\n              onChange={(e) => setFormData({ ...formData, emergencyContact: e.target.value })}\n              className={`mt-1 ${errors.emergencyContact ? 'border-red-500' : ''}`}\n            />\n            {errors.emergencyContact && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.emergencyContact}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"emergencyPhone\" className=\"text-sm font-medium text-gray-700\">\n              Emergency Contact Phone *\n            </Label>\n            <Input\n              id=\"emergencyPhone\"\n              type=\"tel\"\n              placeholder=\"Enter emergency contact phone\"\n              value={formData.emergencyPhone || \"\"}\n              onChange={(e) => setFormData({ ...formData, emergencyPhone: e.target.value })}\n              className={`mt-1 ${errors.emergencyPhone ? 'border-red-500' : ''}`}\n            />\n            {errors.emergencyPhone && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.emergencyPhone}</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end pt-6\">\n        <Button\n          type=\"button\"\n          onClick={handleNext}\n          className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2\"\n        >\n          <span>Next: Verification</span>\n          <ArrowRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":9938},"client/src/components/ehr-connection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Database, Shield, CheckCircle, AlertCircle, Hospital, Link as LinkIcon } from \"lucide-react\";\n\ninterface EHRConnectionProps {\n  isConnected: boolean;\n  onConnect: () => void;\n}\n\nexport default function EHRConnection({ isConnected, onConnect }: EHRConnectionProps) {\n  const [selectedProvider, setSelectedProvider] = useState(\"\");\n  const [patientId, setPatientId] = useState(\"\");\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const ehrProviders = [\n    { id: \"epic\", name: \"Epic\", description: \"Epic Systems EHR\" },\n    { id: \"cerner\", name: \"Cerner\", description: \"Oracle Cerner EHR\" },\n    { id: \"allscripts\", name: \"Allscripts\", description: \"Allscripts Healthcare Solutions\" },\n    { id: \"athena\", name: \"athenahealth\", description: \"athenahealth EHR\" },\n    { id: \"nextgen\", name: \"NextGen\", description: \"NextGen Healthcare EHR\" },\n    { id: \"greenway\", name: \"Greenway\", description: \"Greenway Health EHR\" },\n    { id: \"other\", name: \"Other\", description: \"Other FHIR-compatible EHR system\" }\n  ];\n\n  const handleConnect = async () => {\n    if (!selectedProvider || !patientId) return;\n    \n    setIsConnecting(true);\n    // Simulate connection process\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    setIsConnecting(false);\n    onConnect();\n  };\n\n  if (isConnected) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-green-700 mb-2\">EHR Connected Successfully</h3>\n          <p className=\"text-gray-600\">\n            Your medical records are now accessible for clinical trial screening\n          </p>\n        </div>\n\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Database className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <p className=\"font-medium text-green-800\">Connected Provider</p>\n                  <p className=\"text-sm text-green-600\">{ehrProviders.find(p => p.id === selectedProvider)?.name || \"Epic Systems\"}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-green-600\">Active</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex space-x-4\">\n          <Button \n            variant=\"outline\" \n            className=\"flex-1 border-green-600 text-green-600 hover:bg-green-600 hover:text-white\"\n          >\n            Refresh Data\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"flex-1 border-red-600 text-red-600 hover:bg-red-600 hover:text-white\"\n          >\n            Disconnect\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-6\">\n        <Database className=\"w-12 h-12 text-az-magenta mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Connect Your EHR</h3>\n        <p className=\"text-gray-600 text-sm\">\n          Securely access your medical records through your healthcare provider's EHR system\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"ehrProvider\" className=\"text-sm font-medium text-gray-700\">\n            Select Your Healthcare Provider's EHR System\n          </Label>\n          <Select value={selectedProvider} onValueChange={setSelectedProvider}>\n            <SelectTrigger className=\"mt-1\">\n              <SelectValue placeholder=\"Choose your EHR provider\" />\n            </SelectTrigger>\n            <SelectContent>\n              {ehrProviders.map(provider => (\n                <SelectItem key={provider.id} value={provider.id}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Hospital className=\"w-4 h-4\" />\n                    <div>\n                      <p className=\"font-medium\">{provider.name}</p>\n                      <p className=\"text-xs text-gray-500\">{provider.description}</p>\n                    </div>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"patientId\" className=\"text-sm font-medium text-gray-700\">\n            Patient ID or Medical Record Number\n          </Label>\n          <Input\n            id=\"patientId\"\n            placeholder=\"Enter your patient ID or MRN\"\n            value={patientId}\n            onChange={(e) => setPatientId(e.target.value)}\n            className=\"mt-1\"\n          />\n          <p className=\"text-xs text-gray-500 mt-1\">\n            This can usually be found on your patient portal or medical documents\n          </p>\n        </div>\n\n        <Button\n          onClick={handleConnect}\n          disabled={!selectedProvider || !patientId || isConnecting}\n          className=\"w-full bg-az-magenta hover:bg-pink-700 text-white\"\n        >\n          {isConnecting ? (\n            <>\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n              Connecting to EHR...\n            </>\n          ) : (\n            <>\n              <LinkIcon className=\"w-4 h-4 mr-2\" />\n              Connect EHR System\n            </>\n          )}\n        </Button>\n      </div>\n\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-sm flex items-center space-x-2\">\n            <Shield className=\"w-4 h-4 text-blue-600\" />\n            <span className=\"text-blue-800\">Security & Privacy</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <ul className=\"text-xs text-blue-700 space-y-1\">\n            <li>• Connection uses secure OAuth 2.0 and FHIR R4 standards</li>\n            <li>• Your data is encrypted during transmission and storage</li>\n            <li>• We only access medical information relevant to trial eligibility</li>\n            <li>• You can disconnect at any time</li>\n            <li>• No data is shared without your explicit consent</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border-yellow-200 bg-yellow-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertCircle className=\"w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-medium text-yellow-800 mb-1\">Before You Connect</h4>\n              <ul className=\"text-sm text-yellow-700 space-y-1\">\n                <li>• Ensure you have access to your patient portal</li>\n                <li>• Verify your patient ID or medical record number</li>\n                <li>• Check with your healthcare provider if you need assistance</li>\n                <li>• Contact support if your EHR system isn't listed</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7868},"client/src/components/eligibility-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { EligibilityData } from \"@/pages/eligibility\";\n\ninterface EligibilityFormProps {\n  onNext?: () => void;\n  onBack?: () => void;\n  onSubmit?: (data: EligibilityData) => void;\n  formData: Partial<EligibilityData>;\n  setFormData: (data: Partial<EligibilityData>) => void;\n  isStep2?: boolean;\n}\n\nexport default function EligibilityForm({ \n  onNext, \n  onBack, \n  onSubmit, \n  formData, \n  setFormData, \n  isStep2 = false \n}: EligibilityFormProps) {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateStep1 = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.age || formData.age < 1 || formData.age > 120) {\n      newErrors.age = \"Please enter a valid age between 1 and 120\";\n    }\n\n    if (!formData.diagnosis) {\n      newErrors.diagnosis = \"Please select a diagnosis\";\n    }\n\n    if (!formData.location) {\n      newErrors.location = \"Please select your location\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const validateStep2 = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.medications) {\n      newErrors.medications = \"Please provide information about current medications\";\n    }\n\n    if (!formData.previousTreatments) {\n      newErrors.previousTreatments = \"Please provide information about previous treatments\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep1()) {\n      onNext?.();\n    }\n  };\n\n  const handleSubmit = () => {\n    if (validateStep2()) {\n      onSubmit?.(formData as EligibilityData);\n    }\n  };\n\n  if (isStep2) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <Label htmlFor=\"medications\" className=\"text-sm font-medium text-gray-700\">\n            Current Medications *\n          </Label>\n          <Textarea\n            id=\"medications\"\n            placeholder=\"Please list all current medications, including dosages if known...\"\n            value={formData.medications || \"\"}\n            onChange={(e) => setFormData({ ...formData, medications: e.target.value })}\n            className={`mt-1 ${errors.medications ? 'border-red-500' : ''}`}\n            rows={4}\n          />\n          {errors.medications && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.medications}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"previousTreatments\" className=\"text-sm font-medium text-gray-700\">\n            Previous Treatments *\n          </Label>\n          <Textarea\n            id=\"previousTreatments\"\n            placeholder=\"Please describe any previous treatments for your condition...\"\n            value={formData.previousTreatments || \"\"}\n            onChange={(e) => setFormData({ ...formData, previousTreatments: e.target.value })}\n            className={`mt-1 ${errors.previousTreatments ? 'border-red-500' : ''}`}\n            rows={4}\n          />\n          {errors.previousTreatments && (\n            <p className=\"text-red-500 text-sm mt-1\">{errors.previousTreatments}</p>\n          )}\n        </div>\n\n        <div className=\"flex justify-between pt-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onBack}\n            className=\"flex items-center space-x-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            <span>Back</span>\n          </Button>\n          \n          <Button\n            type=\"button\"\n            onClick={handleSubmit}\n            className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2\"\n          >\n            <span>Submit Assessment</span>\n            <ArrowRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Label htmlFor=\"age\" className=\"text-sm font-medium text-gray-700\">\n          Age *\n        </Label>\n        <Input\n          id=\"age\"\n          type=\"number\"\n          placeholder=\"Enter your age\"\n          value={formData.age || \"\"}\n          onChange={(e) => setFormData({ ...formData, age: parseInt(e.target.value) || 0 })}\n          className={`mt-1 ${errors.age ? 'border-red-500' : ''}`}\n          min=\"1\"\n          max=\"120\"\n        />\n        {errors.age && (\n          <p className=\"text-red-500 text-sm mt-1\">{errors.age}</p>\n        )}\n      </div>\n\n      <div>\n        <Label htmlFor=\"diagnosis\" className=\"text-sm font-medium text-gray-700\">\n          Primary Diagnosis *\n        </Label>\n        <Select \n          value={formData.diagnosis || \"\"} \n          onValueChange={(value) => setFormData({ ...formData, diagnosis: value })}\n        >\n          <SelectTrigger className={`mt-1 ${errors.diagnosis ? 'border-red-500' : ''}`}>\n            <SelectValue placeholder=\"Select your primary diagnosis\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"cancer-lung\">Lung Cancer</SelectItem>\n            <SelectItem value=\"cancer-breast\">Breast Cancer</SelectItem>\n            <SelectItem value=\"cancer-colon\">Colon Cancer</SelectItem>\n            <SelectItem value=\"diabetes-type2\">Type 2 Diabetes</SelectItem>\n            <SelectItem value=\"cardiovascular\">Cardiovascular Disease</SelectItem>\n            <SelectItem value=\"respiratory\">Respiratory Disease</SelectItem>\n            <SelectItem value=\"autoimmune\">Autoimmune Disease</SelectItem>\n            <SelectItem value=\"neurological\">Neurological Disorder</SelectItem>\n            <SelectItem value=\"rare-disease\">Rare Disease</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n        {errors.diagnosis && (\n          <p className=\"text-red-500 text-sm mt-1\">{errors.diagnosis}</p>\n        )}\n      </div>\n\n      <div>\n        <Label htmlFor=\"location\" className=\"text-sm font-medium text-gray-700\">\n          Location *\n        </Label>\n        <Select \n          value={formData.location || \"\"} \n          onValueChange={(value) => setFormData({ ...formData, location: value })}\n        >\n          <SelectTrigger className={`mt-1 ${errors.location ? 'border-red-500' : ''}`}>\n            <SelectValue placeholder=\"Select your location\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"north-america\">North America</SelectItem>\n            <SelectItem value=\"europe\">Europe</SelectItem>\n            <SelectItem value=\"asia-pacific\">Asia Pacific</SelectItem>\n            <SelectItem value=\"latin-america\">Latin America</SelectItem>\n            <SelectItem value=\"middle-east-africa\">Middle East & Africa</SelectItem>\n          </SelectContent>\n        </Select>\n        {errors.location && (\n          <p className=\"text-red-500 text-sm mt-1\">{errors.location}</p>\n        )}\n      </div>\n\n      <div className=\"flex justify-end pt-6\">\n        <Button\n          type=\"button\"\n          onClick={handleNext}\n          className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2\"\n        >\n          <span>Next Step</span>\n          <ArrowRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":7583},"client/src/components/eligibility-results.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle, FileText, Phone, Calendar, Users } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { EligibilityData } from \"@/pages/eligibility\";\n\ninterface EligibilityResultsProps {\n  result: {\n    eligible: boolean;\n    eligibleTrials: string[];\n    recommendations: string[];\n    nextSteps: string[];\n  };\n  formData: Partial<EligibilityData>;\n}\n\nexport default function EligibilityResults({ result, formData }: EligibilityResultsProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Results Header */}\n      <div className=\"text-center\">\n        {result.eligible ? (\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-green-700 mb-2\">Great News!</h3>\n              <p className=\"text-gray-600\">\n                You may be eligible for {result.eligibleTrials.length} clinical trial{result.eligibleTrials.length !== 1 ? 's' : ''} based on your responses.\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center\">\n              <XCircle className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-yellow-700 mb-2\">Thank You for Your Interest</h3>\n              <p className=\"text-gray-600\">\n                While you may not meet the current criteria, we appreciate your interest in clinical research.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Summary Card */}\n      <Card className=\"border-l-4 border-l-az-magenta\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Assessment Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-gray-500\">Age</p>\n              <p className=\"font-medium\">{formData.age} years old</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Primary Diagnosis</p>\n              <p className=\"font-medium\">{formData.diagnosis}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Location</p>\n              <p className=\"font-medium\">{formData.location}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Eligible Trials */}\n      {result.eligible && result.eligibleTrials.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <FileText className=\"w-5 h-5 text-az-magenta\" />\n              <span>Potentially Eligible Trials</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {result.eligibleTrials.map((trial, index) => (\n                <div key={index} className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">{trial}</h4>\n                  <Badge className=\"bg-green-100 text-green-800\">Potential Match</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Recommendations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-3\">\n            {result.recommendations.map((recommendation, index) => (\n              <li key={index} className=\"flex items-start space-x-3\">\n                <CheckCircle className=\"w-5 h-5 text-az-magenta mt-0.5 flex-shrink-0\" />\n                <span className=\"text-gray-700\">{recommendation}</span>\n              </li>\n            ))}\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Next Steps */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Next Steps</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {result.nextSteps.map((step, index) => (\n              <div key={index} className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-az-magenta text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0\">\n                  {index + 1}\n                </div>\n                <span className=\"text-gray-700\">{step}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex flex-col sm:flex-row gap-4 pt-6\">\n        {result.eligible ? (\n          <>\n            <Link href=\"/registration\">\n              <Button className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2 flex-1\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>Start Registration Process</span>\n              </Button>\n            </Link>\n            <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white flex items-center space-x-2 flex-1\">\n              <Phone className=\"w-4 h-4\" />\n              <span>Speak with Research Team</span>\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white flex items-center space-x-2 flex-1\">\n              <Users className=\"w-4 h-4\" />\n              <span>Join Patient Network</span>\n            </Button>\n            <Link href=\"/\">\n              <Button className=\"bg-az-magenta hover:bg-pink-700 text-white flex-1\">\n                Explore More Trials\n              </Button>\n            </Link>\n          </>\n        )}\n      </div>\n\n      {/* Disclaimer */}\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <p className=\"text-sm text-gray-600\">\n          <strong>Important:</strong> This assessment provides preliminary eligibility information only. \n          Final eligibility will be determined through comprehensive medical screening by our clinical research team. \n          Please consult with your healthcare provider before making any treatment decisions.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":6772},"client/src/components/epro-logs.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, CheckCircle, Clock, AlertTriangle, TrendingUp, Search } from \"lucide-react\";\n\ninterface EproEntry {\n  id: string;\n  date: string;\n  type: 'daily-symptoms' | 'quality-of-life' | 'medication-adherence' | 'adverse-events';\n  status: 'completed' | 'pending' | 'overdue';\n  score?: number;\n  responses: Record<string, any>;\n}\n\nexport default function EproLogs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  const eproEntries: EproEntry[] = [\n    {\n      id: \"1\",\n      date: \"2024-08-17\",\n      type: \"daily-symptoms\",\n      status: \"completed\",\n      score: 3,\n      responses: {\n        fatigue: 4,\n        nausea: 2,\n        pain: 1,\n        appetite: 3,\n        mood: 4\n      }\n    },\n    {\n      id: \"2\", \n      date: \"2024-08-16\",\n      type: \"medication-adherence\",\n      status: \"completed\",\n      responses: {\n        morningDose: true,\n        eveningDose: true,\n        missedDoses: 0,\n        sideEffects: \"mild nausea\"\n      }\n    },\n    {\n      id: \"3\",\n      date: \"2024-08-15\",\n      type: \"quality-of-life\",\n      status: \"completed\",\n      score: 7,\n      responses: {\n        physicalWellbeing: 7,\n        emotionalWellbeing: 6,\n        socialWellbeing: 8,\n        functionalWellbeing: 7\n      }\n    },\n    {\n      id: \"4\",\n      date: \"2024-08-17\",\n      type: \"adverse-events\",\n      status: \"pending\",\n      responses: {}\n    },\n    {\n      id: \"5\",\n      date: \"2024-08-14\",\n      type: \"daily-symptoms\",\n      status: \"overdue\",\n      responses: {}\n    }\n  ];\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'daily-symptoms':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'quality-of-life':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'medication-adherence':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'adverse-events':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      default:\n        return <Calendar className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'daily-symptoms':\n        return 'Daily Symptoms';\n      case 'quality-of-life':\n        return 'Quality of Life';\n      case 'medication-adherence':\n        return 'Medication Adherence';\n      case 'adverse-events':\n        return 'Adverse Events';\n      default:\n        return type;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case 'overdue':\n        return <Badge className=\"bg-red-100 text-red-800\">Overdue</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const filteredEntries = eproEntries.filter(entry => {\n    const matchesSearch = getTypeLabel(entry.type).toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         entry.date.includes(searchTerm);\n    const matchesType = filterType === \"all\" || entry.type === filterType;\n    const matchesStatus = filterStatus === \"all\" || entry.status === filterStatus;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const completionStats = {\n    total: eproEntries.length,\n    completed: eproEntries.filter(e => e.status === 'completed').length,\n    pending: eproEntries.filter(e => e.status === 'pending').length,\n    overdue: eproEntries.filter(e => e.status === 'overdue').length\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      \n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-l-4 border-l-blue-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{completionStats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Entries</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"border-l-4 border-l-green-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">{completionStats.completed}</p>\n              <p className=\"text-sm text-gray-600\">Completed</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"border-l-4 border-l-yellow-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-yellow-600\">{completionStats.pending}</p>\n              <p className=\"text-sm text-gray-600\">Pending</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"border-l-4 border-l-red-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-red-600\">{completionStats.overdue}</p>\n              <p className=\"text-sm text-gray-600\">Overdue</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle>Filter & Search</CardTitle>\n          <CardDescription>Find specific ePRO entries</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search by type or date...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"daily-symptoms\">Daily Symptoms</SelectItem>\n                <SelectItem value=\"quality-of-life\">Quality of Life</SelectItem>\n                <SelectItem value=\"medication-adherence\">Medication Adherence</SelectItem>\n                <SelectItem value=\"adverse-events\">Adverse Events</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* ePRO Entries List */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-5 h-5 text-az-magenta\" />\n            <span>ePRO Entries</span>\n          </CardTitle>\n          <CardDescription>Your electronic patient-reported outcome logs</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {filteredEntries.length > 0 ? (\n            <div className=\"space-y-4\">\n              {filteredEntries.map((entry) => (\n                <div key={entry.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`mt-1 ${\n                        entry.status === 'completed' ? 'text-green-600' :\n                        entry.status === 'pending' ? 'text-yellow-600' :\n                        'text-red-600'\n                      }`}>\n                        {getTypeIcon(entry.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h4 className=\"font-medium text-gray-900\">{getTypeLabel(entry.type)}</h4>\n                          {getStatusBadge(entry.status)}\n                          {entry.score && (\n                            <Badge variant=\"outline\" className=\"text-az-magenta border-az-magenta\">\n                              Score: {entry.score}/10\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          {new Date(entry.date).toLocaleDateString('en-US', {\n                            weekday: 'long',\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric'\n                          })}\n                        </p>\n                        \n                        {entry.status === 'completed' && Object.keys(entry.responses).length > 0 && (\n                          <div className=\"bg-gray-50 p-3 rounded-md\">\n                            <h5 className=\"text-xs font-medium text-gray-700 mb-2\">Responses:</h5>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 text-xs\">\n                              {Object.entries(entry.responses).map(([key, value]) => (\n                                <div key={key} className=\"flex justify-between\">\n                                  <span className=\"text-gray-600 capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>\n                                  <span className=\"font-medium\">\n                                    {typeof value === 'boolean' ? (value ? 'Yes' : 'No') : value}\n                                  </span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      {entry.status === 'pending' || entry.status === 'overdue' ? (\n                        <Button size=\"sm\" className=\"bg-az-magenta hover:bg-pink-700 text-white\">\n                          Complete\n                        </Button>\n                      ) : (\n                        <Button size=\"sm\" variant=\"outline\">\n                          View Details\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Search className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No ePRO entries found matching your criteria</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Common ePRO tasks</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Button className=\"bg-az-magenta hover:bg-pink-700 text-white h-auto p-4 flex flex-col space-y-2\">\n              <TrendingUp className=\"w-6 h-6\" />\n              <span className=\"text-sm\">Daily Symptoms</span>\n            </Button>\n            <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white h-auto p-4 flex flex-col space-y-2\">\n              <CheckCircle className=\"w-6 h-6\" />\n              <span className=\"text-sm\">Quality of Life</span>\n            </Button>\n            <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white h-auto p-4 flex flex-col space-y-2\">\n              <Clock className=\"w-6 h-6\" />\n              <span className=\"text-sm\">Medication Log</span>\n            </Button>\n            <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white h-auto p-4 flex flex-col space-y-2\">\n              <AlertTriangle className=\"w-6 h-6\" />\n              <span className=\"text-sm\">Report Event</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":13234},"client/src/components/footer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 lg:gap-12\">\n          \n          {/* Company Info */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 bg-az-gold rounded-lg flex items-center justify-center\">\n                <span className=\"text-az-magenta font-bold text-xl\">AZ</span>\n              </div>\n              <div>\n                <h4 className=\"text-xl font-bold\">AstraZeneca</h4>\n                <p className=\"text-gray-400 text-sm\">Clinical Trials Portal</p>\n              </div>\n            </div>\n            <p className=\"text-gray-300 mb-6 max-w-md\">\n              Leading the way in innovative clinical research to transform healthcare outcomes and improve patient lives globally through cutting-edge therapeutics and breakthrough treatments.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold transition-colors duration-200\">\n                <span className=\"sr-only\">LinkedIn</span>\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold transition-colors duration-200\">\n                <span className=\"sr-only\">Twitter</span>\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h5 className=\"text-lg font-semibold mb-4\">Research</h5>\n            <ul className=\"space-y-3\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Clinical Trials</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Research Areas</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Publications</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Partnerships</a></li>\n            </ul>\n          </div>\n          \n          {/* Support */}\n          <div>\n            <h5 className=\"text-lg font-semibold mb-4\">Support</h5>\n            <ul className=\"space-y-3\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Patient Resources</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Healthcare Professionals</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-az-gold transition-colors duration-200\">FAQs</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        {/* Bottom Bar */}\n        <div className=\"border-t border-gray-800 mt-12 pt-8\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm mb-4 lg:mb-0\">\n              © 2024 AstraZeneca. All rights reserved.\n            </p>\n            <div className=\"flex flex-wrap gap-6\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold text-sm transition-colors duration-200\">Privacy Policy</a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold text-sm transition-colors duration-200\">Terms of Service</a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold text-sm transition-colors duration-200\">Cookie Policy</a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-az-gold text-sm transition-colors duration-200\">Accessibility</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5234},"client/src/components/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X, User, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { isAuthenticated, getCurrentUser, logout } from \"@/lib/auth\";\n\nexport default function Header() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [user, setUser] = useState(getCurrentUser());\n\n  useEffect(() => {\n    setUser(getCurrentUser());\n  }, []);\n\n  return (\n    <header className=\"bg-az-magenta shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <div className=\"flex items-center space-x-3\">\n            {/* AstraZeneca Logo */}\n            <div className=\"w-10 h-10 bg-az-gold rounded-lg flex items-center justify-center\">\n              <span className=\"text-az-magenta font-bold text-xl\">AZ</span>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">Clinical Trials Portal</h1>\n              <p className=\"text-pink-200 text-sm\">Advancing Healthcare Research</p>\n            </div>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            <a href=\"/\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n              Trials\n            </a>\n            <a href=\"/eligibility\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n              Eligibility\n            </a>\n            <a href=\"/appointment-booking\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n              Book Appointment\n            </a>\n            {user && (\n              <a href=\"/dashboard\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n                Dashboard\n              </a>\n            )}\n            {user ? (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-white text-sm\">Welcome, {user.firstName}</span>\n                <Button \n                  onClick={logout}\n                  variant=\"outline\" \n                  className=\"border-az-gold text-az-gold hover:bg-az-gold hover:text-az-magenta\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </div>\n            ) : (\n              <a href=\"/login\">\n                <Button className=\"bg-az-gold hover:bg-yellow-500 text-az-magenta font-semibold\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Sign In\n                </Button>\n              </a>\n            )}\n          </nav>\n          \n          {/* Mobile menu button */}\n          <button\n            className=\"md:hidden text-white hover:text-az-gold transition-colors duration-200\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            {mobileMenuOpen ? (\n              <X className=\"w-6 h-6\" />\n            ) : (\n              <Menu className=\"w-6 h-6\" />\n            )}\n          </button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden pb-4\">\n            <div className=\"flex flex-col space-y-4\">\n              <a href=\"/\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n                Trials\n              </a>\n              <a href=\"/eligibility\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n                Eligibility\n              </a>\n              <a href=\"/appointment-booking\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n                Book Appointment\n              </a>\n              {user && (\n                <a href=\"/dashboard\" className=\"text-white hover:text-az-gold transition-colors duration-200 font-medium\">\n                  Dashboard\n                </a>\n              )}\n              {user ? (\n                <div className=\"space-y-3\">\n                  <span className=\"text-white text-sm block\">Welcome, {user.firstName}</span>\n                  <Button \n                    onClick={logout}\n                    variant=\"outline\" \n                    className=\"border-az-gold text-az-gold hover:bg-az-gold hover:text-az-magenta w-fit\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Sign Out\n                  </Button>\n                </div>\n              ) : (\n                <a href=\"/login\">\n                  <Button className=\"bg-az-gold hover:bg-yellow-500 text-az-magenta font-semibold w-fit\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Sign In\n                  </Button>\n                </a>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":4983},"client/src/components/hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function Hero() {\n  return (\n    <section className=\"bg-az-magenta text-white py-20 lg:py-32\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-6 leading-tight\">\n            Pioneering Clinical Research for{\" \"}\n            <span className=\"text-az-gold\">Better Health Outcomes</span>\n          </h2>\n          <p className=\"text-xl md:text-2xl mb-8 text-pink-100 leading-relaxed\">\n            Discover groundbreaking clinical trials that are shaping the future of medicine. \n            Join us in advancing healthcare research and improving patient lives worldwide.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <a href=\"/eligibility\">\n              <Button \n                size=\"lg\"\n                className=\"bg-az-gold hover:bg-yellow-500 text-az-magenta font-bold text-lg px-8 py-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg\"\n              >\n                Check Eligibility\n              </Button>\n            </a>\n            <Button \n              variant=\"outline\"\n              size=\"lg\"\n              className=\"border-2 border-az-gold text-az-gold hover:bg-az-gold hover:text-az-magenta font-semibold text-lg px-8 py-4 rounded-xl transition-all duration-300\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1609},"client/src/components/id-verification.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Upload, File, CheckCircle, X, Shield } from \"lucide-react\";\nimport { RegistrationData } from \"@/pages/registration\";\n\ninterface IDVerificationProps {\n  onComplete: () => void;\n  onBack: () => void;\n  formData: Partial<RegistrationData>;\n  setFormData: (data: Partial<RegistrationData>) => void;\n}\n\nexport default function IDVerification({ onComplete, onBack, formData, setFormData }: IDVerificationProps) {\n  const [documentType, setDocumentType] = useState(\"\");\n  const [uploadedFile, setUploadedFile] = useState<File | null>(formData.idDocument || null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];\n      \n      if (file.size > maxSize) {\n        setErrors({ file: \"File size must be less than 10MB\" });\n        return;\n      }\n      \n      if (!allowedTypes.includes(file.type)) {\n        setErrors({ file: \"Only JPEG, PNG, and PDF files are allowed\" });\n        return;\n      }\n      \n      setErrors({});\n      setUploadedFile(file);\n      setFormData({ ...formData, idDocument: file });\n    }\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0];\n    if (file) {\n      const fakeEvent = {\n        target: { files: [file] }\n      } as unknown as React.ChangeEvent<HTMLInputElement>;\n      handleFileSelect(fakeEvent);\n    }\n  };\n\n  const removeFile = () => {\n    setUploadedFile(null);\n    setFormData({ ...formData, idDocument: null });\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const validate = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!documentType) {\n      newErrors.documentType = \"Please select a document type\";\n    }\n\n    if (!uploadedFile) {\n      newErrors.file = \"Please upload an identity document\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleComplete = async () => {\n    if (validate()) {\n      setIsUploading(true);\n      // Simulate upload process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      setIsUploading(false);\n      onComplete();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-az-magenta/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Shield className=\"w-8 h-8 text-az-magenta\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Identity Verification</h3>\n        <p className=\"text-gray-600\">\n          Upload a government-issued ID to verify your identity for clinical trial participation\n        </p>\n      </div>\n\n      <div>\n        <Label htmlFor=\"documentType\" className=\"text-sm font-medium text-gray-700\">\n          Document Type *\n        </Label>\n        <Select \n          value={documentType} \n          onValueChange={setDocumentType}\n        >\n          <SelectTrigger className={`mt-1 ${errors.documentType ? 'border-red-500' : ''}`}>\n            <SelectValue placeholder=\"Select document type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"drivers-license\">Driver's License</SelectItem>\n            <SelectItem value=\"passport\">Passport</SelectItem>\n            <SelectItem value=\"state-id\">State ID Card</SelectItem>\n            <SelectItem value=\"military-id\">Military ID</SelectItem>\n            <SelectItem value=\"national-id\">National ID Card</SelectItem>\n          </SelectContent>\n        </Select>\n        {errors.documentType && (\n          <p className=\"text-red-500 text-sm mt-1\">{errors.documentType}</p>\n        )}\n      </div>\n\n      <div>\n        <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n          Upload Document *\n        </Label>\n        \n        {!uploadedFile ? (\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer hover:border-az-magenta hover:bg-gray-50 ${\n              errors.file ? 'border-red-500 bg-red-50' : 'border-gray-300'\n            }`}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-lg font-medium text-gray-600 mb-2\">\n              Drop your document here or click to browse\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              Supports JPEG, PNG, PDF up to 10MB\n            </p>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\".jpg,.jpeg,.png,.pdf\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n          </div>\n        ) : (\n          <div className=\"border rounded-lg p-4 bg-green-50 border-green-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <File className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">{uploadedFile.name}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={removeFile}\n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {errors.file && (\n          <p className=\"text-red-500 text-sm mt-2\">{errors.file}</p>\n        )}\n      </div>\n\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">Document Requirements</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• Document must be current and not expired</li>\n          <li>• Image should be clear and legible</li>\n          <li>• All corners of the document should be visible</li>\n          <li>• No shadows or glare covering text</li>\n          <li>• Name on document must match registration information</li>\n        </ul>\n      </div>\n\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <div className=\"flex items-start space-x-3\">\n          <Shield className=\"w-5 h-5 text-gray-600 mt-0.5 flex-shrink-0\" />\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-1\">Privacy & Security</h4>\n            <p className=\"text-sm text-gray-600\">\n              Your identity documents are encrypted and stored securely. They will only be used for \n              verification purposes and will be deleted after the clinical trial registration process \n              is complete, in accordance with our privacy policy.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between pt-6\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"flex items-center space-x-2\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span>Back</span>\n        </Button>\n        \n        <Button\n          type=\"button\"\n          onClick={handleComplete}\n          disabled={isUploading || !uploadedFile || !documentType}\n          className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2\"\n        >\n          {isUploading ? (\n            <>\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              <span>Uploading...</span>\n            </>\n          ) : (\n            <>\n              <span>Complete Registration</span>\n              <CheckCircle className=\"w-4 h-4\" />\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":8987},"client/src/components/medical-file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, File, X, Plus } from \"lucide-react\";\n\ninterface MedicalFileUploadProps {\n  onFilesUploaded: (files: File[]) => void;\n}\n\ninterface FileWithCategory {\n  file: File;\n  category: string;\n}\n\nexport default function MedicalFileUpload({ onFilesUploaded }: MedicalFileUploadProps) {\n  const [selectedFiles, setSelectedFiles] = useState<FileWithCategory[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const documentCategories = [\n    \"Lab Results\",\n    \"Imaging Reports\",\n    \"Pathology Reports\",\n    \"Treatment Records\",\n    \"Medication History\",\n    \"Consultation Notes\",\n    \"Surgical Reports\",\n    \"Other Medical Records\"\n  ];\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const newFilesWithCategory = files.map(file => ({\n      file,\n      category: \"\"\n    }));\n    setSelectedFiles(prev => [...prev, ...newFilesWithCategory]);\n  };\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    const files = Array.from(event.dataTransfer.files);\n    const newFilesWithCategory = files.map(file => ({\n      file,\n      category: \"\"\n    }));\n    setSelectedFiles(prev => [...prev, ...newFilesWithCategory]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateFileCategory = (index: number, category: string) => {\n    setSelectedFiles(prev => \n      prev.map((item, i) => \n        i === index ? { ...item, category } : item\n      )\n    );\n  };\n\n  const handleUpload = async () => {\n    const validFiles = selectedFiles.filter(item => item.category);\n    if (validFiles.length === 0) return;\n\n    setIsUploading(true);\n    // Simulate upload delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    onFilesUploaded(validFiles.map(item => item.file));\n    setSelectedFiles([]);\n    setIsUploading(false);\n    \n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const canUpload = selectedFiles.length > 0 && selectedFiles.every(item => item.category);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Upload Area */}\n      <div\n        className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-colors cursor-pointer hover:border-az-magenta hover:bg-gray-50\"\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef.current?.click()}\n      >\n        <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-lg font-medium text-gray-600 mb-2\">\n          Drop your medical files here or click to browse\n        </p>\n        <p className=\"text-sm text-gray-500 mb-4\">\n          Supports PDF, JPEG, PNG up to 25MB per file\n        </p>\n        <Button variant=\"outline\" className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Select Files\n        </Button>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept=\".pdf,.jpg,.jpeg,.png\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n      </div>\n\n      {/* Selected Files */}\n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-gray-900\">Selected Files</h4>\n          {selectedFiles.map((item, index) => (\n            <div key={index} className=\"border rounded-lg p-4 bg-gray-50\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <File className=\"w-5 h-5 text-gray-600\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{item.file.name}</p>\n                    <p className=\"text-sm text-gray-500\">{formatFileSize(item.file.size)}</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Document Category *\n                </Label>\n                <Select \n                  value={item.category} \n                  onValueChange={(value) => updateFileCategory(index, value)}\n                >\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select document category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {documentCategories.map(category => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          ))}\n          \n          <Button\n            onClick={handleUpload}\n            disabled={!canUpload || isUploading}\n            className=\"w-full bg-az-magenta hover:bg-pink-700 text-white\"\n          >\n            {isUploading ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                Uploading Files...\n              </>\n            ) : (\n              <>\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload {selectedFiles.length} File{selectedFiles.length !== 1 ? 's' : ''}\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* Upload Instructions */}\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">Upload Instructions</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• Ensure all documents are clearly legible and complete</li>\n          <li>• Remove any personal information you don't want to share</li>\n          <li>• Categorize each document accurately for faster review</li>\n          <li>• Upload the most recent versions of your medical records</li>\n          <li>• Contact support if you have questions about document types</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":7182},"client/src/components/otp-verification.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, ArrowRight, MessageSquare, Clock } from \"lucide-react\";\nimport { RegistrationData } from \"@/pages/registration\";\n\ninterface OTPVerificationProps {\n  onNext: () => void;\n  onBack: () => void;\n  formData: Partial<RegistrationData>;\n  setFormData: (data: Partial<RegistrationData>) => void;\n}\n\nexport default function OTPVerification({ onNext, onBack, formData, setFormData }: OTPVerificationProps) {\n  const [otpCode, setOtpCode] = useState(formData.otpCode || \"\");\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes\n  const [isResending, setIsResending] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [timeLeft]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleResendOTP = async () => {\n    setIsResending(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setTimeLeft(300);\n    setIsResending(false);\n  };\n\n  const validate = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!otpCode.trim()) {\n      newErrors.otpCode = \"Verification code is required\";\n    } else if (otpCode.length !== 6) {\n      newErrors.otpCode = \"Verification code must be 6 digits\";\n    } else if (!/^\\d+$/.test(otpCode)) {\n      newErrors.otpCode = \"Verification code must contain only numbers\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validate()) {\n      setFormData({ ...formData, otpCode });\n      onNext();\n    }\n  };\n\n  const handleOtpChange = (value: string) => {\n    // Only allow digits and limit to 6 characters\n    const cleanValue = value.replace(/\\D/g, '').slice(0, 6);\n    setOtpCode(cleanValue);\n    setErrors({});\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-az-magenta/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <MessageSquare className=\"w-8 h-8 text-az-magenta\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Verify Your Phone Number</h3>\n        <p className=\"text-gray-600\">\n          We've sent a 6-digit verification code to{\" \"}\n          <span className=\"font-medium text-gray-900\">{formData.phone}</span>\n        </p>\n      </div>\n\n      <div className=\"max-w-sm mx-auto\">\n        <Label htmlFor=\"otpCode\" className=\"text-sm font-medium text-gray-700 block text-center mb-3\">\n          Enter Verification Code\n        </Label>\n        <Input\n          id=\"otpCode\"\n          type=\"text\"\n          placeholder=\"000000\"\n          value={otpCode}\n          onChange={(e) => handleOtpChange(e.target.value)}\n          className={`text-center text-2xl font-mono tracking-[0.5em] h-14 ${errors.otpCode ? 'border-red-500' : ''}`}\n          maxLength={6}\n        />\n        {errors.otpCode && (\n          <p className=\"text-red-500 text-sm mt-2 text-center\">{errors.otpCode}</p>\n        )}\n      </div>\n\n      <div className=\"text-center\">\n        {timeLeft > 0 ? (\n          <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Code expires in {formatTime(timeLeft)}</span>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <p className=\"text-red-600 text-sm\">Verification code has expired</p>\n            <Button\n              variant=\"link\"\n              onClick={handleResendOTP}\n              disabled={isResending}\n              className=\"text-az-magenta hover:text-pink-700 p-0 h-auto\"\n            >\n              {isResending ? \"Sending...\" : \"Resend verification code\"}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">Didn't receive the code?</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• Check your SMS/text messages</li>\n          <li>• Verify the phone number is correct</li>\n          <li>• Make sure you have cellular service</li>\n          <li>• Wait a few minutes and try again</li>\n        </ul>\n      </div>\n\n      <div className=\"flex justify-between pt-6\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"flex items-center space-x-2\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span>Back</span>\n        </Button>\n        \n        <Button\n          type=\"button\"\n          onClick={handleNext}\n          disabled={!otpCode || otpCode.length !== 6 || timeLeft === 0}\n          className=\"bg-az-magenta hover:bg-pink-700 text-white flex items-center space-x-2\"\n        >\n          <span>Verify & Continue</span>\n          <ArrowRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      <div className=\"text-center\">\n        <p className=\"text-xs text-gray-500\">\n          By continuing, you agree to receive SMS messages for verification purposes.\n          Standard message and data rates may apply.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":5617},"client/src/components/phase-chip.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface PhaseChipProps {\n  phase: string;\n}\n\nconst getPhaseColor = (phase: string) => {\n  const normalizedPhase = phase.toLowerCase();\n  \n  if (normalizedPhase.includes(\"phase i/ii\") || normalizedPhase.includes(\"phase 1/2\")) {\n    return \"bg-phase-1 text-white\";\n  }\n  \n  if (normalizedPhase.includes(\"phase i\") || normalizedPhase.includes(\"phase 1\")) {\n    return \"bg-phase-1 text-white\";\n  }\n  \n  if (normalizedPhase.includes(\"phase ii\") || normalizedPhase.includes(\"phase 2\")) {\n    return \"bg-phase-2 text-white\";\n  }\n  \n  if (normalizedPhase.includes(\"phase iii\") || normalizedPhase.includes(\"phase 3\")) {\n    return \"bg-phase-3 text-az-magenta\";\n  }\n  \n  if (normalizedPhase.includes(\"phase iv\") || normalizedPhase.includes(\"phase 4\")) {\n    return \"bg-phase-4 text-white\";\n  }\n  \n  return \"bg-gray-500 text-white\";\n};\n\nexport default function PhaseChip({ phase }: PhaseChipProps) {\n  return (\n    <Badge \n      className={`${getPhaseColor(phase)} text-sm font-semibold px-3 py-1 rounded-full`}\n      variant=\"secondary\"\n    >\n      {phase}\n    </Badge>\n  );\n}\n","size_bytes":1117},"client/src/components/randomization-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Sparkles, Users, FlaskConical, Trophy, ArrowRight } from \"lucide-react\";\n\ninterface RandomizationModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function RandomizationModal({ open, onClose }: RandomizationModalProps) {\n  const [step, setStep] = useState<'randomizing' | 'result'>('randomizing');\n  const [assignedGroup, setAssignedGroup] = useState<'treatment' | 'control'>('treatment');\n\n  useEffect(() => {\n    if (open) {\n      setStep('randomizing');\n      \n      // Simulate randomization process\n      setTimeout(() => {\n        // Random assignment (50/50 chance)\n        const groups: ('treatment' | 'control')[] = ['treatment', 'control'];\n        const randomGroup = groups[Math.floor(Math.random() * groups.length)];\n        setAssignedGroup(randomGroup);\n        setStep('result');\n      }, 3000);\n    }\n  }, [open]);\n\n  const handleClose = () => {\n    setStep('randomizing');\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        {step === 'randomizing' ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-20 h-20 bg-az-magenta/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <div className=\"relative\">\n                <FlaskConical className=\"w-10 h-10 text-az-magenta\" />\n                <div className=\"absolute inset-0 bg-az-magenta/20 rounded-full animate-ping\"></div>\n              </div>\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Randomization in Progress\n            </h2>\n            \n            <p className=\"text-gray-600 mb-8\">\n              You are being randomly assigned to a study group. This process ensures \n              the scientific integrity of the clinical trial.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-az-magenta rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-az-magenta rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                <div className=\"w-2 h-2 bg-az-magenta rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n              </div>\n              <p className=\"text-sm text-gray-500\">Processing randomization algorithm...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center\">\n            <DialogHeader className=\"mb-6\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-az-gold to-yellow-400 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Trophy className=\"w-10 h-10 text-az-magenta\" />\n              </div>\n              <DialogTitle className=\"text-2xl text-gray-900\">\n                🎉 Randomization Complete!\n              </DialogTitle>\n              <DialogDescription className=\"text-lg text-gray-600\">\n                Welcome to your clinical trial journey\n              </DialogDescription>\n            </DialogHeader>\n\n            <Card className={`mb-6 border-2 ${\n              assignedGroup === 'treatment' \n                ? 'border-az-magenta bg-pink-50' \n                : 'border-blue-500 bg-blue-50'\n            }`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-center space-x-3 mb-4\">\n                  <Users className={`w-8 h-8 ${\n                    assignedGroup === 'treatment' ? 'text-az-magenta' : 'text-blue-600'\n                  }`} />\n                  <h3 className={`text-xl font-bold ${\n                    assignedGroup === 'treatment' ? 'text-az-magenta' : 'text-blue-600'\n                  }`}>\n                    {assignedGroup === 'treatment' ? 'Treatment Group' : 'Control Group'}\n                  </h3>\n                </div>\n                \n                <p className={`text-sm mb-4 ${\n                  assignedGroup === 'treatment' ? 'text-pink-800' : 'text-blue-800'\n                }`}>\n                  {assignedGroup === 'treatment' \n                    ? 'You will receive the experimental treatment along with standard care'\n                    : 'You will receive the standard care treatment as the control comparison'\n                  }\n                </p>\n\n                <div className=\"bg-white rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">What This Means:</h4>\n                  <ul className=\"text-sm text-gray-600 space-y-2 text-left\">\n                    {assignedGroup === 'treatment' ? (\n                      <>\n                        <li>• You'll receive the investigational drug being studied</li>\n                        <li>• Monthly visits for monitoring and assessments</li>\n                        <li>• Additional lab work and imaging studies</li>\n                        <li>• Close monitoring by the research team</li>\n                        <li>• All study-related care is provided at no cost</li>\n                      </>\n                    ) : (\n                      <>\n                        <li>• You'll receive the current standard of care treatment</li>\n                        <li>• Regular visits for monitoring and assessments</li>\n                        <li>• Standard lab work and clinical evaluations</li>\n                        <li>• Careful monitoring by the research team</li>\n                        <li>• All study-related care is provided at no cost</li>\n                      </>\n                    )}\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"bg-gray-50 p-6 rounded-lg mb-6\">\n              <div className=\"flex items-start space-x-3\">\n                <Sparkles className=\"w-5 h-5 text-az-gold mt-1 flex-shrink-0\" />\n                <div className=\"text-left\">\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">Important Notes</h4>\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\n                    <li>• Your group assignment is blinded to ensure objective results</li>\n                    <li>• Both groups receive excellent medical care and monitoring</li>\n                    <li>• You can withdraw from the study at any time</li>\n                    <li>• Emergency unblinding procedures are available if needed</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={handleClose}\n                className=\"flex-1\"\n              >\n                Continue Later\n              </Button>\n              <Button \n                className=\"bg-az-magenta hover:bg-pink-700 text-white flex-1\"\n                onClick={() => {\n                  handleClose();\n                  window.location.href = '/dashboard';\n                }}\n              >\n                Go to Dashboard\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7535},"client/src/components/reminders.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Bell, Clock, Pill, Calendar, FileText, CheckCircle, X, Plus } from \"lucide-react\";\n\ninterface Reminder {\n  id: string;\n  title: string;\n  description: string;\n  type: 'medication' | 'appointment' | 'questionnaire' | 'lab' | 'custom';\n  time: string;\n  frequency: 'daily' | 'weekly' | 'monthly' | 'one-time';\n  enabled: boolean;\n  nextDue?: string;\n  status: 'active' | 'completed' | 'missed';\n}\n\nexport default function Reminders() {\n  const [reminders, setReminders] = useState<Reminder[]>([\n    {\n      id: \"1\",\n      title: \"Take Study Medication\",\n      description: \"Morning dose of investigational drug\",\n      type: \"medication\",\n      time: \"09:00\",\n      frequency: \"daily\",\n      enabled: true,\n      nextDue: \"2024-08-18T09:00:00\",\n      status: \"active\"\n    },\n    {\n      id: \"2\",\n      title: \"Evening Medication\",\n      description: \"Evening dose of investigational drug\",\n      type: \"medication\", \n      time: \"21:00\",\n      frequency: \"daily\",\n      enabled: true,\n      nextDue: \"2024-08-17T21:00:00\",\n      status: \"active\"\n    },\n    {\n      id: \"3\",\n      title: \"Daily Symptom Questionnaire\",\n      description: \"Complete your daily symptom assessment\",\n      type: \"questionnaire\",\n      time: \"19:00\",\n      frequency: \"daily\",\n      enabled: true,\n      nextDue: \"2024-08-17T19:00:00\",\n      status: \"active\"\n    },\n    {\n      id: \"4\",\n      title: \"Appointment Reminder\",\n      description: \"Follow-up visit with Dr. Smith\",\n      type: \"appointment\",\n      time: \"10:00\",\n      frequency: \"one-time\",\n      enabled: true,\n      nextDue: \"2024-08-25T10:00:00\",\n      status: \"active\"\n    },\n    {\n      id: \"5\",\n      title: \"Lab Work\",\n      description: \"Fasting blood draw for safety labs\",\n      type: \"lab\",\n      time: \"08:00\",\n      frequency: \"weekly\",\n      enabled: true,\n      nextDue: \"2024-08-19T08:00:00\",\n      status: \"active\"\n    },\n    {\n      id: \"6\",\n      title: \"Quality of Life Survey\",\n      description: \"Weekly quality of life assessment\",\n      type: \"questionnaire\",\n      time: \"18:00\",\n      frequency: \"weekly\",\n      enabled: false,\n      nextDue: \"2024-08-18T18:00:00\",\n      status: \"active\"\n    }\n  ]);\n\n  const toggleReminder = (id: string) => {\n    setReminders(prev => \n      prev.map(reminder => \n        reminder.id === id \n          ? { ...reminder, enabled: !reminder.enabled }\n          : reminder\n      )\n    );\n  };\n\n  const markCompleted = (id: string) => {\n    setReminders(prev =>\n      prev.map(reminder =>\n        reminder.id === id\n          ? { ...reminder, status: 'completed' }\n          : reminder\n      )\n    );\n  };\n\n  const dismissReminder = (id: string) => {\n    setReminders(prev =>\n      prev.map(reminder =>\n        reminder.id === id\n          ? { ...reminder, status: 'missed' }\n          : reminder\n      )\n    );\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'medication':\n        return <Pill className=\"w-4 h-4\" />;\n      case 'appointment':\n        return <Calendar className=\"w-4 h-4\" />;\n      case 'questionnaire':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'lab':\n        return <Clock className=\"w-4 h-4\" />;\n      default:\n        return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'medication':\n        return 'bg-blue-100 text-blue-800';\n      case 'appointment':\n        return 'bg-green-100 text-green-800';\n      case 'questionnaire':\n        return 'bg-purple-100 text-purple-800';\n      case 'lab':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatTimeUntil = (dateString: string) => {\n    const now = new Date();\n    const target = new Date(dateString);\n    const diffMs = target.getTime() - now.getTime();\n    \n    if (diffMs < 0) return \"Overdue\";\n    \n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (diffHours < 1) {\n      return `${diffMins}m`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h ${diffMins}m`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays}d`;\n    }\n  };\n\n  const activeReminders = reminders.filter(r => r.enabled && r.status === 'active');\n  const upcomingReminders = activeReminders.filter(r => r.nextDue && new Date(r.nextDue) > new Date());\n  const overdueReminders = activeReminders.filter(r => r.nextDue && new Date(r.nextDue) <= new Date());\n\n  return (\n    <div className=\"space-y-6\">\n      \n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"border-l-4 border-l-az-magenta\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Reminders</p>\n                <p className=\"text-2xl font-bold text-az-magenta\">{activeReminders.length}</p>\n              </div>\n              <Bell className=\"w-8 h-8 text-az-magenta\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"border-l-4 border-l-green-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Upcoming</p>\n                <p className=\"text-2xl font-bold text-green-600\">{upcomingReminders.length}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"border-l-4 border-l-red-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Overdue</p>\n                <p className=\"text-2xl font-bold text-red-600\">{overdueReminders.length}</p>\n              </div>\n              <Bell className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Overdue Reminders */}\n      {overdueReminders.length > 0 && (\n        <Card className=\"shadow-lg border-0 border-l-4 border-l-red-500\">\n          <CardHeader>\n            <CardTitle className=\"text-red-700 flex items-center space-x-2\">\n              <Bell className=\"w-5 h-5\" />\n              <span>Overdue Reminders</span>\n            </CardTitle>\n            <CardDescription>These reminders need immediate attention</CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-3\">\n              {overdueReminders.map((reminder) => (\n                <div key={reminder.id} className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-red-600\">\n                        {getTypeIcon(reminder.type)}\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-red-900\">{reminder.title}</h4>\n                        <p className=\"text-sm text-red-700\">{reminder.description}</p>\n                        <p className=\"text-xs text-red-600\">\n                          Due: {new Date(reminder.nextDue!).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        onClick={() => markCompleted(reminder.id)}\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      >\n                        <CheckCircle className=\"w-4 h-4 mr-1\" />\n                        Complete\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => dismissReminder(reminder.id)}\n                        className=\"border-red-300 text-red-600 hover:bg-red-50\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* All Reminders */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"w-5 h-5 text-az-magenta\" />\n                <span>All Reminders</span>\n              </CardTitle>\n              <CardDescription>Manage your study-related reminders</CardDescription>\n            </div>\n            <Button className=\"bg-az-magenta hover:bg-pink-700 text-white\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Reminder\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            {reminders.map((reminder) => (\n              <div key={reminder.id} className={`border rounded-lg p-4 transition-colors ${\n                !reminder.enabled ? 'bg-gray-50 opacity-75' : 'hover:bg-gray-50'\n              }`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Switch\n                      checked={reminder.enabled}\n                      onCheckedChange={() => toggleReminder(reminder.id)}\n                    />\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-lg ${getTypeColor(reminder.type)}`}>\n                        {getTypeIcon(reminder.type)}\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">{reminder.title}</h4>\n                        <p className=\"text-sm text-gray-600\">{reminder.description}</p>\n                        <div className=\"flex items-center space-x-4 mt-1\">\n                          <span className=\"text-xs text-gray-500\">\n                            {reminder.time} • {reminder.frequency}\n                          </span>\n                          {reminder.nextDue && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {formatTimeUntil(reminder.nextDue)}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {reminder.status === 'completed' && (\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Completed\n                      </Badge>\n                    )}\n                    {reminder.status === 'missed' && (\n                      <Badge className=\"bg-red-100 text-red-800\">\n                        Missed\n                      </Badge>\n                    )}\n                    <Button variant=\"ghost\" size=\"sm\">\n                      Edit\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notification Settings */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle>Notification Settings</CardTitle>\n          <CardDescription>Customize how you receive reminder notifications</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Push Notifications</p>\n                <p className=\"text-sm text-gray-600\">Receive notifications on your device</p>\n              </div>\n              <Switch defaultChecked />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Email Reminders</p>\n                <p className=\"text-sm text-gray-600\">Get reminder emails for important tasks</p>\n              </div>\n              <Switch defaultChecked />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-gray-900\">SMS Alerts</p>\n                <p className=\"text-sm text-gray-600\">Text message reminders for urgent items</p>\n              </div>\n              <Switch />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Sound Alerts</p>\n                <p className=\"text-sm text-gray-600\">Play sound when notifications arrive</p>\n              </div>\n              <Switch defaultChecked />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":13708},"client/src/components/study-info.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FileText, Users, Calendar, Target, Shield, Phone } from \"lucide-react\";\n\nexport default function StudyInfo() {\n  const studyDetails = {\n    title: \"Novel Oncology Treatment for Advanced Lung Cancer\",\n    protocol: \"LUNG-2024-001\",\n    phase: \"Phase II\",\n    sponsor: \"AstraZeneca\",\n    principalInvestigator: \"Dr. Sarah Smith, MD\",\n    enrollmentTarget: 250,\n    currentEnrollment: 127,\n    studyDuration: \"24 months\",\n    primaryEndpoint: \"Progression-free survival at 12 months\",\n    secondaryEndpoints: [\n      \"Overall survival\",\n      \"Objective response rate\", \n      \"Safety and tolerability\",\n      \"Quality of life measures\"\n    ]\n  };\n\n  const inclusionCriteria = [\n    \"Age 18-75 years\",\n    \"Histologically confirmed advanced NSCLC\",\n    \"ECOG performance status 0-2\",\n    \"Adequate organ function\",\n    \"Life expectancy ≥ 12 weeks\",\n    \"Signed informed consent\"\n  ];\n\n  const exclusionCriteria = [\n    \"Previous treatment with similar agents\",\n    \"Active CNS metastases\",\n    \"Uncontrolled intercurrent illness\",\n    \"Pregnancy or breastfeeding\",\n    \"History of severe allergic reactions\"\n  ];\n\n  const studySchedule = [\n    { visit: \"Screening\", timepoint: \"Day -28 to -1\", procedures: \"Consent, medical history, labs, imaging\" },\n    { visit: \"Baseline\", timepoint: \"Day 1\", procedures: \"Randomization, first dose, safety assessment\" },\n    { visit: \"Cycle 1\", timepoint: \"Day 15\", procedures: \"Safety labs, adverse event review\" },\n    { visit: \"Cycle 2\", timepoint: \"Day 29\", procedures: \"Efficacy assessment, imaging, QOL\" },\n    { visit: \"Follow-up\", timepoint: \"Every 8 weeks\", procedures: \"Disease assessment, survival follow-up\" }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      \n      {/* Study Overview */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span>Study Overview</span>\n          </CardTitle>\n          <CardDescription className=\"text-pink-100\">\n            Comprehensive information about your clinical trial\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6 space-y-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{studyDetails.title}</h3>\n            <p className=\"text-gray-600 mb-4\">\n              This Phase II clinical trial evaluates the safety and efficacy of an innovative \n              targeted therapy for patients with advanced non-small cell lung cancer who have \n              not responded to standard treatments.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Protocol Number</p>\n              <p className=\"font-medium\">{studyDetails.protocol}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Study Phase</p>\n              <Badge className=\"bg-phase-2 text-white\">{studyDetails.phase}</Badge>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Sponsor</p>\n              <p className=\"font-medium\">{studyDetails.sponsor}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Principal Investigator</p>\n              <p className=\"font-medium\">{studyDetails.principalInvestigator}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Study Duration</p>\n              <p className=\"font-medium\">{studyDetails.studyDuration}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Primary Endpoint</p>\n              <p className=\"font-medium\">{studyDetails.primaryEndpoint}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        \n        {/* Enrollment Progress */}\n        <Card className=\"shadow-lg border-0\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5 text-az-magenta\" />\n              <span>Enrollment Progress</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Current Enrollment</span>\n                <span className=\"font-medium\">{studyDetails.currentEnrollment} / {studyDetails.enrollmentTarget}</span>\n              </div>\n              <Progress \n                value={(studyDetails.currentEnrollment / studyDetails.enrollmentTarget) * 100} \n                className=\"h-3\"\n              />\n              <p className=\"text-xs text-gray-500\">\n                {Math.round((studyDetails.currentEnrollment / studyDetails.enrollmentTarget) * 100)}% enrolled\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Study Objectives */}\n        <Card className=\"shadow-lg border-0\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Target className=\"w-5 h-5 text-az-magenta\" />\n              <span>Study Objectives</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"font-medium text-gray-900 mb-2\">Primary Endpoint</p>\n                <p className=\"text-sm text-gray-600\">{studyDetails.primaryEndpoint}</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900 mb-2\">Secondary Endpoints</p>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  {studyDetails.secondaryEndpoints.map((endpoint, index) => (\n                    <li key={index}>• {endpoint}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Eligibility Criteria */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-green-700\">Inclusion Criteria</CardTitle>\n            <CardDescription>Requirements for study participation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <ul className=\"space-y-2\">\n              {inclusionCriteria.map((criteria, index) => (\n                <li key={index} className=\"flex items-start space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                  <span className=\"text-sm text-gray-700\">{criteria}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-red-700\">Exclusion Criteria</CardTitle>\n            <CardDescription>Conditions that prevent participation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <ul className=\"space-y-2\">\n              {exclusionCriteria.map((criteria, index) => (\n                <li key={index} className=\"flex items-start space-x-2\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                  <span className=\"text-sm text-gray-700\">{criteria}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Study Schedule */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-5 h-5 text-az-magenta\" />\n            <span>Study Schedule</span>\n          </CardTitle>\n          <CardDescription>Timeline of study visits and procedures</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-2 text-sm font-medium text-gray-600\">Visit</th>\n                  <th className=\"text-left py-2 text-sm font-medium text-gray-600\">Timepoint</th>\n                  <th className=\"text-left py-2 text-sm font-medium text-gray-600\">Procedures</th>\n                </tr>\n              </thead>\n              <tbody>\n                {studySchedule.map((visit, index) => (\n                  <tr key={index} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 text-sm font-medium text-gray-900\">{visit.visit}</td>\n                    <td className=\"py-3 text-sm text-gray-600\">{visit.timepoint}</td>\n                    <td className=\"py-3 text-sm text-gray-600\">{visit.procedures}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Information */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Phone className=\"w-5 h-5 text-az-magenta\" />\n            <span>Study Team Contact</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Research Coordinator</h4>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Name:</strong> Jennifer Martinez, RN</p>\n                <p><strong>Phone:</strong> (555) 123-4567</p>\n                <p><strong>Email:</strong> jennifer.martinez@clinicalresearch.com</p>\n                <p><strong>Hours:</strong> Mon-Fri 8:00 AM - 5:00 PM</p>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">24/7 Emergency Contact</h4>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Emergency Line:</strong> (555) 999-EMRG</p>\n                <p><strong>On-call Physician:</strong> Available 24/7</p>\n                <p className=\"text-gray-600 italic\">\n                  For urgent medical concerns related to the study\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}","size_bytes":10897},"client/src/components/symptom-report-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, CheckCircle, Send, Calendar, Clock } from \"lucide-react\";\n\ninterface SymptomReportDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface SymptomReport {\n  id: string;\n  patientId: string;\n  date: string;\n  time: string;\n  symptomType: string;\n  severity: string;\n  description: string;\n  duration: string;\n  triggers: string[];\n  medications: string;\n  seekMedicalCare: boolean;\n  interferenceLevel: string;\n  status: 'submitted' | 'under-review' | 'reviewed';\n}\n\nexport default function SymptomReportDialog({ open, onClose }: SymptomReportDialogProps) {\n  const [step, setStep] = useState<'form' | 'confirmation'>('form');\n  const [formData, setFormData] = useState({\n    symptomType: '',\n    severity: '',\n    description: '',\n    duration: '',\n    triggers: [] as string[],\n    medications: '',\n    seekMedicalCare: false,\n    interferenceLevel: ''\n  });\n\n  const symptomTypes = [\n    'Fatigue',\n    'Nausea/Vomiting',\n    'Pain',\n    'Shortness of breath',\n    'Fever',\n    'Diarrhea',\n    'Constipation',\n    'Dizziness',\n    'Headache',\n    'Skin reaction',\n    'Loss of appetite',\n    'Sleep problems',\n    'Mood changes',\n    'Other'\n  ];\n\n  const severityLevels = [\n    { value: '1', label: '1 - Mild (doesn\\'t interfere with activities)' },\n    { value: '2', label: '2 - Mild to Moderate' },\n    { value: '3', label: '3 - Moderate (interferes with some activities)' },\n    { value: '4', label: '4 - Moderate to Severe' },\n    { value: '5', label: '5 - Severe (unable to perform activities)' }\n  ];\n\n  const commonTriggers = [\n    'Study medication',\n    'Food/meals',\n    'Physical activity',\n    'Stress',\n    'Weather changes',\n    'Sleep changes',\n    'Other medications',\n    'Unknown'\n  ];\n\n  const handleTriggerChange = (trigger: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      triggers: checked \n        ? [...prev.triggers, trigger]\n        : prev.triggers.filter(t => t !== trigger)\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Simulate submission to investigator system\n    const report: SymptomReport = {\n      id: Date.now().toString(),\n      patientId: 'P-001234',\n      date: new Date().toISOString().split('T')[0],\n      time: new Date().toTimeString().split(' ')[0],\n      ...formData,\n      status: 'submitted'\n    };\n\n    // Store in localStorage to simulate database\n    const existingReports = JSON.parse(localStorage.getItem('symptomReports') || '[]');\n    localStorage.setItem('symptomReports', JSON.stringify([...existingReports, report]));\n\n    setStep('confirmation');\n  };\n\n  const handleClose = () => {\n    setStep('form');\n    setFormData({\n      symptomType: '',\n      severity: '',\n      description: '',\n      duration: '',\n      triggers: [],\n      medications: '',\n      seekMedicalCare: false,\n      interferenceLevel: ''\n    });\n    onClose();\n  };\n\n  const isFormValid = formData.symptomType && formData.severity && formData.description && formData.duration;\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        {step === 'form' ? (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"w-5 h-5 text-az-magenta\" />\n                <span>Report a Symptom or Side Effect</span>\n              </DialogTitle>\n              <DialogDescription>\n                Please provide detailed information about any symptoms or side effects you're experiencing. \n                This information helps your research team monitor your safety.\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6 py-4\">\n              \n              {/* Symptom Type */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Type of Symptom *\n                </Label>\n                <Select value={formData.symptomType} onValueChange={(value) => setFormData(prev => ({ ...prev, symptomType: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select symptom type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {symptomTypes.map(type => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Severity */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                  Symptom Severity *\n                </Label>\n                <RadioGroup \n                  value={formData.severity} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, severity: value }))}\n                  className=\"space-y-2\"\n                >\n                  {severityLevels.map(level => (\n                    <div key={level.value} className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value={level.value} id={`severity-${level.value}`} />\n                      <Label htmlFor={`severity-${level.value}`} className=\"text-sm\">\n                        {level.label}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              </div>\n\n              {/* Description */}\n              <div>\n                <Label htmlFor=\"description\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Detailed Description *\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Please describe your symptom in detail - when it started, how it feels, any patterns you've noticed...\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  rows={4}\n                />\n              </div>\n\n              {/* Duration */}\n              <div>\n                <Label htmlFor=\"duration\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  How long have you been experiencing this symptom? *\n                </Label>\n                <Input\n                  id=\"duration\"\n                  placeholder=\"e.g., 2 hours, 1 day, 3 days\"\n                  value={formData.duration}\n                  onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                />\n              </div>\n\n              {/* Potential Triggers */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                  Potential Triggers (check all that apply)\n                </Label>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {commonTriggers.map(trigger => (\n                    <div key={trigger} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`trigger-${trigger}`}\n                        checked={formData.triggers.includes(trigger)}\n                        onCheckedChange={(checked) => handleTriggerChange(trigger, !!checked)}\n                      />\n                      <Label htmlFor={`trigger-${trigger}`} className=\"text-sm\">\n                        {trigger}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Medications Taken */}\n              <div>\n                <Label htmlFor=\"medications\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Medications taken for this symptom\n                </Label>\n                <Textarea\n                  id=\"medications\"\n                  placeholder=\"List any medications, including over-the-counter drugs, that you took for this symptom...\"\n                  value={formData.medications}\n                  onChange={(e) => setFormData(prev => ({ ...prev, medications: e.target.value }))}\n                  rows={2}\n                />\n              </div>\n\n              {/* Medical Care */}\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"seekMedicalCare\"\n                  checked={formData.seekMedicalCare}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, seekMedicalCare: !!checked }))}\n                />\n                <Label htmlFor=\"seekMedicalCare\" className=\"text-sm\">\n                  I sought medical care for this symptom (ER visit, doctor visit, etc.)\n                </Label>\n              </div>\n\n              {/* Activity Interference */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  How much did this symptom interfere with your daily activities?\n                </Label>\n                <Select value={formData.interferenceLevel} onValueChange={(value) => setFormData(prev => ({ ...prev, interferenceLevel: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select interference level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"none\">Not at all</SelectItem>\n                    <SelectItem value=\"little\">A little bit</SelectItem>\n                    <SelectItem value=\"somewhat\">Somewhat</SelectItem>\n                    <SelectItem value=\"quite\">Quite a bit</SelectItem>\n                    <SelectItem value=\"very\">Very much</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Emergency Notice */}\n              <Card className=\"border-red-200 bg-red-50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <h4 className=\"font-medium text-red-900 mb-1\">Emergency Situations</h4>\n                      <p className=\"text-sm text-red-800\">\n                        If you are experiencing a medical emergency, please call 911 or go to your nearest \n                        emergency room immediately. Do not wait to report through this system.\n                      </p>\n                      <p className=\"text-sm text-red-800 mt-2 font-medium\">\n                        24/7 Study Emergency Line: (555) 999-EMRG\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n            </div>\n\n            <div className=\"flex justify-between pt-4\">\n              <Button variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSubmit}\n                disabled={!isFormValid}\n                className=\"bg-az-magenta hover:bg-pink-700 text-white\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                Submit Report\n              </Button>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            \n            <DialogTitle className=\"text-2xl text-green-700 mb-4\">\n              Symptom Report Submitted\n            </DialogTitle>\n            \n            <DialogDescription className=\"text-gray-600 mb-6\">\n              Thank you for reporting this symptom. Your research team has been notified and will \n              review your report. You should expect contact within 24 hours for non-urgent symptoms.\n            </DialogDescription>\n\n            <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n              <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-600\">\n                <div className=\"flex items-center space-x-1\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>{new Date().toLocaleDateString()}</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>{new Date().toLocaleTimeString()}</span>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Report ID: SR-{Date.now().toString().slice(-6)}\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-gray-600\">\n                <strong>What happens next?</strong>\n              </p>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Research team reviews your report</li>\n                <li>• You may be contacted for follow-up questions</li>\n                <li>• Any necessary medical care will be coordinated</li>\n                <li>• Report is documented in your study record</li>\n              </ul>\n            </div>\n\n            <Button \n              onClick={handleClose}\n              className=\"mt-6 bg-az-magenta hover:bg-pink-700 text-white\"\n            >\n              Close\n            </Button>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14090},"client/src/components/trial-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport PhaseChip from \"./phase-chip\";\nimport { ClinicalTrial } from \"@shared/schema\";\n\ninterface TrialCardProps {\n  trial: ClinicalTrial;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status.toLowerCase()) {\n    case \"actively recruiting\":\n      return \"bg-green-100 text-green-800\";\n    case \"screening\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"not recruiting\":\n      return \"bg-red-100 text-red-800\";\n    case \"starting soon\":\n      return \"bg-blue-100 text-blue-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport default function TrialCard({ trial }: TrialCardProps) {\n  const isNotRecruiting = trial.recruitmentStatus.toLowerCase() === \"not recruiting\";\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-100\">\n      <div className=\"p-6\">\n        {/* Phase Chip */}\n        <div className=\"mb-4\">\n          <PhaseChip phase={trial.phase} />\n        </div>\n        \n        {/* Trial Title */}\n        <h4 className=\"text-lg font-bold text-gray-900 mb-3 line-clamp-2\">\n          {trial.title}\n        </h4>\n        \n        {/* Disease Area */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-500 mb-1\">Disease Area</p>\n          <p className=\"text-sm font-medium text-gray-700\">{trial.diseaseArea}</p>\n        </div>\n        \n        {/* Recruitment Status */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-500 mb-1\">Recruitment Status</p>\n          <Badge \n            className={`${getStatusColor(trial.recruitmentStatus)} text-xs font-medium`}\n            variant=\"secondary\"\n          >\n            {trial.recruitmentStatus}\n          </Badge>\n        </div>\n        \n        {/* Site Location */}\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-gray-500 mb-1\">Primary Site</p>\n          <p className=\"text-sm font-medium text-gray-700\">{trial.primarySite}</p>\n        </div>\n        \n        {/* Action Button */}\n        <a href={`/trial/${trial.id}`}>\n          <Button \n            className={`w-full font-semibold transition-colors duration-200 ${\n              isNotRecruiting \n                ? \"bg-gray-300 text-gray-600 cursor-not-allowed hover:bg-gray-300\" \n                : \"bg-az-magenta hover:bg-pink-700 text-white\"\n            }`}\n            disabled={isNotRecruiting}\n          >\n            {isNotRecruiting ? \"View Details\" : \"Learn More\"}\n          </Button>\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2659},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport const isAuthenticated = (): boolean => {\n  return localStorage.getItem('isAuthenticated') === 'true';\n};\n\nexport const getCurrentUser = (): User | null => {\n  if (!isAuthenticated()) return null;\n  \n  const userInfo = localStorage.getItem('userInfo');\n  if (!userInfo) return null;\n  \n  try {\n    return JSON.parse(userInfo);\n  } catch {\n    return null;\n  }\n};\n\nexport const logout = (): void => {\n  localStorage.removeItem('isAuthenticated');\n  localStorage.removeItem('userInfo');\n  window.location.href = '/';\n};\n\nexport const requireAuth = (): void => {\n  if (!isAuthenticated()) {\n    window.location.href = '/login';\n  }\n};","size_bytes":736},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/appointment-booking.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar, Clock, CheckCircle, User, MapPin, Phone } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport AppointmentCalendar from \"@/components/appointment-calendar\";\nimport RandomizationModal from \"@/components/randomization-modal\";\n\ninterface TimeSlot {\n  time: string;\n  available: boolean;\n}\n\ninterface AppointmentDetails {\n  date: string;\n  time: string;\n  type: string;\n  investigator: string;\n  location: string;\n}\n\nexport default function AppointmentBooking() {\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const [appointmentType, setAppointmentType] = useState<string>(\"\");\n  const [isBookingConfirmed, setIsBookingConfirmed] = useState(false);\n  const [appointmentDetails, setAppointmentDetails] = useState<AppointmentDetails | null>(null);\n  const [isRandomizationOpen, setIsRandomizationOpen] = useState(false);\n  const [approvalStatus, setApprovalStatus] = useState<'pending' | 'approved' | 'rejected'>('pending');\n\n  const timeSlots: TimeSlot[] = [\n    { time: \"09:00 AM\", available: true },\n    { time: \"10:00 AM\", available: true },\n    { time: \"11:00 AM\", available: false },\n    { time: \"01:00 PM\", available: true },\n    { time: \"02:00 PM\", available: true },\n    { time: \"03:00 PM\", available: false },\n    { time: \"04:00 PM\", available: true }\n  ];\n\n  const investigators = [\n    { id: \"dr-smith\", name: \"Dr. Sarah Smith\", specialty: \"Oncology\" },\n    { id: \"dr-johnson\", name: \"Dr. Michael Johnson\", specialty: \"Cardiology\" },\n    { id: \"dr-williams\", name: \"Dr. Emma Williams\", specialty: \"Endocrinology\" }\n  ];\n\n  const appointmentTypes = [\n    { id: \"screening\", name: \"Initial Screening Visit\", duration: \"2 hours\" },\n    { id: \"baseline\", name: \"Baseline Assessment\", duration: \"3 hours\" },\n    { id: \"followup\", name: \"Follow-up Visit\", duration: \"1 hour\" },\n    { id: \"randomization\", name: \"Randomization Visit\", duration: \"1.5 hours\" }\n  ];\n\n  const handleBookAppointment = () => {\n    if (!selectedDate || !selectedTime || !appointmentType) return;\n\n    const details: AppointmentDetails = {\n      date: selectedDate,\n      time: selectedTime,\n      type: appointmentType,\n      investigator: investigators[0].name,\n      location: \"Clinical Research Center, Building A, Room 203\"\n    };\n\n    setAppointmentDetails(details);\n    setIsBookingConfirmed(true);\n  };\n\n  const handleInvestigatorApproval = () => {\n    setApprovalStatus('approved');\n    // If this is a randomization visit, trigger randomization\n    if (appointmentDetails?.type === 'randomization') {\n      setTimeout(() => {\n        setIsRandomizationOpen(true);\n      }, 1000);\n    }\n  };\n\n  const canBook = selectedDate && selectedTime && appointmentType;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Schedule Your Clinical Trial Visit\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Choose a convenient time for your next clinical trial appointment. \n              Our team will review and confirm your booking within 24 hours.\n            </p>\n          </div>\n\n          {!isBookingConfirmed ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              \n              {/* Calendar Section */}\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Calendar className=\"w-5 h-5\" />\n                    <span>Select Date & Time</span>\n                  </CardTitle>\n                  <CardDescription className=\"text-pink-100\">\n                    Choose from available appointment slots\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <AppointmentCalendar \n                    onDateSelect={setSelectedDate}\n                    selectedDate={selectedDate}\n                  />\n                  \n                  {selectedDate && (\n                    <div className=\"mt-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">\n                        Available Times for {new Date(selectedDate).toLocaleDateString()}\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {timeSlots.map((slot) => (\n                          <Button\n                            key={slot.time}\n                            variant={selectedTime === slot.time ? \"default\" : \"outline\"}\n                            className={`p-3 ${\n                              !slot.available \n                                ? \"opacity-50 cursor-not-allowed\" \n                                : selectedTime === slot.time \n                                  ? \"bg-az-magenta text-white\" \n                                  : \"border-gray-300 hover:border-az-magenta\"\n                            }`}\n                            disabled={!slot.available}\n                            onClick={() => setSelectedTime(slot.time)}\n                          >\n                            <Clock className=\"w-4 h-4 mr-2\" />\n                            {slot.time}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Appointment Details */}\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader>\n                  <CardTitle>Appointment Details</CardTitle>\n                  <CardDescription>\n                    Complete your booking information\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-6 space-y-6\">\n                  \n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Appointment Type *\n                    </label>\n                    <Select value={appointmentType} onValueChange={setAppointmentType}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select appointment type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {appointmentTypes.map(type => (\n                          <SelectItem key={type.id} value={type.id}>\n                            <div>\n                              <p className=\"font-medium\">{type.name}</p>\n                              <p className=\"text-xs text-gray-500\">Duration: {type.duration}</p>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {appointmentType && (\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">\n                        {appointmentTypes.find(t => t.id === appointmentType)?.name}\n                      </h4>\n                      <div className=\"text-sm text-blue-800 space-y-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <User className=\"w-4 h-4\" />\n                          <span>Assigned Investigator: {investigators[0].name}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <MapPin className=\"w-4 h-4\" />\n                          <span>Location: Clinical Research Center</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>Duration: {appointmentTypes.find(t => t.id === appointmentType)?.duration}</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-yellow-900 mb-2\">Preparation Instructions</h4>\n                    <ul className=\"text-sm text-yellow-800 space-y-1\">\n                      <li>• Bring a valid photo ID</li>\n                      <li>• Bring your current medication list</li>\n                      <li>• Fast for 8 hours before lab work (if applicable)</li>\n                      <li>• Arrive 15 minutes early for check-in</li>\n                      <li>• Bring insurance cards and emergency contact info</li>\n                    </ul>\n                  </div>\n\n                  <Button\n                    onClick={handleBookAppointment}\n                    disabled={!canBook}\n                    className=\"w-full bg-az-magenta hover:bg-pink-700 text-white py-3\"\n                  >\n                    Book Appointment\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <div className=\"max-w-2xl mx-auto\">\n              <Card className=\"shadow-lg border-0\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                  \n                  <h3 className=\"text-2xl font-bold text-green-700 mb-4\">\n                    Appointment Request Submitted!\n                  </h3>\n                  \n                  <div className=\"bg-gray-50 p-6 rounded-lg mb-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">Appointment Details</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Date:</span>\n                        <span className=\"ml-2 font-medium\">{new Date(appointmentDetails!.date).toLocaleDateString()}</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Time:</span>\n                        <span className=\"ml-2 font-medium\">{appointmentDetails!.time}</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Type:</span>\n                        <span className=\"ml-2 font-medium\">\n                          {appointmentTypes.find(t => t.id === appointmentDetails!.type)?.name}\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Investigator:</span>\n                        <span className=\"ml-2 font-medium\">{appointmentDetails!.investigator}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Simulated Investigator Approval */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">Investigator Review</h4>\n                    {approvalStatus === 'pending' && (\n                      <div className=\"space-y-4\">\n                        <p className=\"text-gray-600\">Waiting for investigator approval...</p>\n                        <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                          <p className=\"text-sm text-yellow-800 mb-3\">\n                            <strong>Simulated Investigator View:</strong> Review and approve patient appointment\n                          </p>\n                          <Button\n                            onClick={handleInvestigatorApproval}\n                            className=\"bg-green-600 hover:bg-green-700 text-white\"\n                          >\n                            Approve Appointment\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {approvalStatus === 'approved' && (\n                      <div className=\"text-center space-y-4\">\n                        <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                          <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <p className=\"text-green-700 font-medium\">Appointment Approved!</p>\n                        <p className=\"text-gray-600\">You will receive a confirmation email shortly.</p>\n                        \n                        <div className=\"flex space-x-4\">\n                          <Button variant=\"outline\" className=\"flex-1\">\n                            Add to Calendar\n                          </Button>\n                          <Button className=\"bg-az-magenta hover:bg-pink-700 text-white flex-1\">\n                            View Dashboard\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n        </div>\n      </main>\n      \n      <Footer />\n      \n      <RandomizationModal \n        open={isRandomizationOpen}\n        onClose={() => setIsRandomizationOpen(false)}\n      />\n    </div>\n  );\n}","size_bytes":14165},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { requireAuth, getCurrentUser } from \"@/lib/auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertTriangle, Calendar, FileText, Bell, Plus, Activity, User, Clock, MapPin } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport StudyInfo from \"@/components/study-info\";\nimport EproLogs from \"@/components/epro-logs\";\nimport Reminders from \"@/components/reminders\";\nimport SymptomReportDialog from \"@/components/symptom-report-dialog\";\n\nexport default function Dashboard() {\n  const [isSymptomDialogOpen, setIsSymptomDialogOpen] = useState(false);\n  \n  useEffect(() => {\n    requireAuth();\n  }, []);\n\n  const patientInfo = {\n    name: \"Sarah Johnson\",\n    studyId: \"LUNG-2024-001\",\n    participantId: \"P-001234\",\n    enrollmentDate: \"2024-08-01\",\n    studyGroup: \"Treatment Group A\",\n    currentPhase: \"Treatment Phase\",\n    progress: 45,\n    nextVisit: \"2024-08-25\"\n  };\n\n  const recentActivity = [\n    {\n      id: 1,\n      type: \"visit\",\n      title: \"Baseline Visit Completed\",\n      date: \"2024-08-15\",\n      status: \"completed\"\n    },\n    {\n      id: 2,\n      type: \"lab\",\n      title: \"Lab Results Available\",\n      date: \"2024-08-12\",\n      status: \"available\"\n    },\n    {\n      id: 3,\n      type: \"epro\",\n      title: \"Daily Symptom Log Due\",\n      date: \"2024-08-17\",\n      status: \"pending\"\n    }\n  ];\n\n  const upcomingReminders = [\n    {\n      id: 1,\n      title: \"Take Study Medication\",\n      time: \"09:00 AM\",\n      type: \"medication\"\n    },\n    {\n      id: 2,\n      title: \"Complete Daily Questionnaire\",\n      time: \"07:00 PM\",\n      type: \"questionnaire\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center\">\n              <div>\n                <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n                  Patient Dashboard\n                </h1>\n                <p className=\"text-lg text-gray-600\">\n                  Welcome back, {patientInfo.name}\n                </p>\n              </div>\n              <Button\n                onClick={() => setIsSymptomDialogOpen(true)}\n                className=\"bg-az-magenta hover:bg-pink-700 text-white mt-4 md:mt-0\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Report Symptom\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"border-l-4 border-l-az-magenta\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Study Progress</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{patientInfo.progress}%</p>\n                  </div>\n                  <Activity className=\"w-8 h-8 text-az-magenta\" />\n                </div>\n                <Progress value={patientInfo.progress} className=\"mt-3\" />\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-az-gold\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Days Enrolled</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {Math.floor((new Date().getTime() - new Date(patientInfo.enrollmentDate).getTime()) / (1000 * 60 * 60 * 24))}\n                    </p>\n                  </div>\n                  <Calendar className=\"w-8 h-8 text-az-gold\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Completed Visits</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">3/7</p>\n                  </div>\n                  <User className=\"w-8 h-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Next Visit</p>\n                    <p className=\"text-lg font-bold text-gray-900\">Aug 25</p>\n                  </div>\n                  <Clock className=\"w-8 h-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Dashboard Tabs */}\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 max-w-2xl mx-auto bg-white border border-gray-200\">\n              <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n                <Activity className=\"w-4 h-4\" />\n                <span>Overview</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"study-info\" className=\"flex items-center space-x-2\">\n                <FileText className=\"w-4 h-4\" />\n                <span>Study Info</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"epro-logs\" className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>My ePRO Logs</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"reminders\" className=\"flex items-center space-x-2\">\n                <Bell className=\"w-4 h-4\" />\n                <span>Reminders</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                \n                {/* Patient Information */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n                    <CardTitle>Study Participation</CardTitle>\n                    <CardDescription className=\"text-pink-100\">\n                      Your current study information\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6 space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Study ID</p>\n                        <p className=\"font-medium\">{patientInfo.studyId}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Participant ID</p>\n                        <p className=\"font-medium\">{patientInfo.participantId}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Study Group</p>\n                        <Badge className=\"bg-az-gold text-az-magenta\">\n                          {patientInfo.studyGroup}\n                        </Badge>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Current Phase</p>\n                        <p className=\"font-medium\">{patientInfo.currentPhase}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4 border-t\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Study Progress</p>\n                      <Progress value={patientInfo.progress} className=\"mb-2\" />\n                      <p className=\"text-xs text-gray-500\">{patientInfo.progress}% Complete</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Activity */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                    <CardDescription>\n                      Your latest study activities and updates\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      {recentActivity.map((activity) => (\n                        <div key={activity.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                          <div className={`w-2 h-2 rounded-full mt-2 ${\n                            activity.status === 'completed' ? 'bg-green-500' :\n                            activity.status === 'available' ? 'bg-blue-500' :\n                            'bg-yellow-500'\n                          }`} />\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-gray-900\">{activity.title}</p>\n                            <p className=\"text-sm text-gray-600\">{new Date(activity.date).toLocaleDateString()}</p>\n                          </div>\n                          <Badge variant=\"outline\" className={\n                            activity.status === 'completed' ? 'border-green-500 text-green-700' :\n                            activity.status === 'available' ? 'border-blue-500 text-blue-700' :\n                            'border-yellow-500 text-yellow-700'\n                          }>\n                            {activity.status}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Next Appointment */}\n                <Card className=\"shadow-lg border-0 lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Calendar className=\"w-5 h-5 text-az-magenta\" />\n                      <span>Next Appointment</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <div className=\"bg-az-magenta/5 border border-az-magenta/20 p-4 rounded-lg\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Calendar className=\"w-5 h-5 text-az-magenta\" />\n                          <div>\n                            <p className=\"text-sm text-gray-600\">Date & Time</p>\n                            <p className=\"font-medium\">Aug 25, 2024 at 10:00 AM</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <MapPin className=\"w-5 h-5 text-az-magenta\" />\n                          <div>\n                            <p className=\"text-sm text-gray-600\">Location</p>\n                            <p className=\"font-medium\">Clinical Research Center</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Clock className=\"w-5 h-5 text-az-magenta\" />\n                          <div>\n                            <p className=\"text-sm text-gray-600\">Duration</p>\n                            <p className=\"font-medium\">2 hours</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 pt-4 border-t border-az-magenta/20\">\n                        <p className=\"text-sm text-gray-600 mb-2\">Preparation needed:</p>\n                        <ul className=\"text-sm text-gray-700 space-y-1\">\n                          <li>• Fast for 8 hours before arrival</li>\n                          <li>• Bring current medication list</li>\n                          <li>• Complete daily questionnaire beforehand</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"study-info\">\n              <StudyInfo />\n            </TabsContent>\n\n            <TabsContent value=\"epro-logs\">\n              <EproLogs />\n            </TabsContent>\n\n            <TabsContent value=\"reminders\">\n              <Reminders />\n            </TabsContent>\n          </Tabs>\n\n        </div>\n      </main>\n      \n      <Footer />\n      \n      <SymptomReportDialog \n        open={isSymptomDialogOpen}\n        onClose={() => setIsSymptomDialogOpen(false)}\n      />\n    </div>\n  );\n}","size_bytes":13345},"client/src/pages/eligibility.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, ArrowLeft, ArrowRight } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport EligibilityForm from \"@/components/eligibility-form\";\nimport EligibilityResults from \"@/components/eligibility-results\";\n\nexport interface EligibilityData {\n  age: number;\n  diagnosis: string;\n  location: string;\n  medications: string;\n  previousTreatments: string;\n}\n\nexport default function Eligibility() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<Partial<EligibilityData>>({});\n  const [eligibilityResult, setEligibilityResult] = useState<any>(null);\n\n  const steps = [\n    { id: 1, title: \"Basic Information\", description: \"Age, diagnosis, and location\" },\n    { id: 2, title: \"Medical History\", description: \"Current medications and treatments\" },\n    { id: 3, title: \"Results\", description: \"Eligibility assessment and recommendations\" }\n  ];\n\n  const progress = (currentStep / steps.length) * 100;\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = (data: EligibilityData) => {\n    setFormData(data);\n    \n    // Basic eligibility logic\n    const result = {\n      eligible: data.age >= 18 && data.age <= 75,\n      eligibleTrials: [],\n      recommendations: [],\n      nextSteps: []\n    };\n\n    if (result.eligible) {\n      result.eligibleTrials = [\n        \"Novel Oncology Treatment for Advanced Lung Cancer\",\n        \"Cardiovascular Prevention Study with Innovative Therapy\"\n      ];\n      result.recommendations = [\n        \"You may be eligible for 2 clinical trials based on your information\",\n        \"Speak with your healthcare provider about participating\",\n        \"Review the detailed trial requirements\"\n      ];\n      result.nextSteps = [\n        \"Schedule a consultation with our clinical research team\",\n        \"Complete additional medical screening\",\n        \"Review and sign informed consent documents\"\n      ];\n    } else {\n      result.recommendations = [\n        \"Based on your current information, you may not meet the age requirements for our active trials\",\n        \"New trials are constantly opening - check back regularly\",\n        \"Speak with your healthcare provider about other treatment options\"\n      ];\n      result.nextSteps = [\n        \"Contact your healthcare provider for alternative treatment options\",\n        \"Sign up for notifications about new trials\",\n        \"Consider participating in patient advocacy groups\"\n      ];\n    }\n\n    setEligibilityResult(result);\n    setCurrentStep(3);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Clinical Trial Eligibility Screening\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Complete this assessment to see if you may be eligible for our current clinical trials.\n              This should take about 5-10 minutes to complete.\n            </p>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mb-8\">\n            <div className=\"flex justify-between items-center mb-4\">\n              {steps.map((step, index) => (\n                <div key={step.id} className=\"flex items-center\">\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                    currentStep > step.id \n                      ? 'bg-az-gold text-az-magenta' \n                      : currentStep === step.id \n                        ? 'bg-az-magenta text-white' \n                        : 'bg-gray-300 text-gray-600'\n                  }`}>\n                    {currentStep > step.id ? <CheckCircle className=\"w-4 h-4\" /> : step.id}\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className={`w-16 h-1 mx-2 ${\n                      currentStep > step.id ? 'bg-az-gold' : 'bg-gray-300'\n                    }`} />\n                  )}\n                </div>\n              ))}\n            </div>\n            <Progress value={progress} className=\"h-2 bg-gray-200\">\n              <div \n                className=\"h-full bg-gradient-to-r from-az-magenta to-az-gold transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              />\n            </Progress>\n          </div>\n\n          {/* Current Step Content */}\n          <Card className=\"shadow-lg border-0\">\n            <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n              <CardTitle className=\"text-xl\">{steps[currentStep - 1]?.title}</CardTitle>\n              <CardDescription className=\"text-pink-100\">\n                {steps[currentStep - 1]?.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              {currentStep === 1 && (\n                <EligibilityForm \n                  onNext={handleNext}\n                  formData={formData}\n                  setFormData={setFormData}\n                />\n              )}\n              \n              {currentStep === 2 && (\n                <EligibilityForm \n                  onNext={handleNext}\n                  onBack={handleBack}\n                  onSubmit={handleSubmit}\n                  formData={formData}\n                  setFormData={setFormData}\n                  isStep2={true}\n                />\n              )}\n              \n              {currentStep === 3 && eligibilityResult && (\n                <EligibilityResults \n                  result={eligibilityResult}\n                  formData={formData}\n                />\n              )}\n            </CardContent>\n          </Card>\n\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":6431},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/header\";\nimport Hero from \"@/components/hero\";\nimport ClinicalTrialsGrid from \"@/components/clinical-trials-grid\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Hero />\n      <ClinicalTrialsGrid />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":377},"client/src/pages/investigator-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Users, AlertTriangle, CheckCircle, Clock, Search, Filter, Eye } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\ninterface SymptomReport {\n  id: string;\n  patientId: string;\n  date: string;\n  time: string;\n  symptomType: string;\n  severity: string;\n  description: string;\n  duration: string;\n  triggers: string[];\n  medications: string;\n  seekMedicalCare: boolean;\n  interferenceLevel: string;\n  status: 'submitted' | 'under-review' | 'reviewed';\n}\n\nexport default function InvestigatorDashboard() {\n  const [symptomReports, setSymptomReports] = useState<SymptomReport[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n\n  // Load symptom reports from localStorage\n  useEffect(() => {\n    const reports = JSON.parse(localStorage.getItem('symptomReports') || '[]');\n    setSymptomReports(reports);\n  }, []);\n\n  const updateReportStatus = (reportId: string, newStatus: 'submitted' | 'under-review' | 'reviewed') => {\n    const updatedReports = symptomReports.map(report => \n      report.id === reportId ? { ...report, status: newStatus } : report\n    );\n    setSymptomReports(updatedReports);\n    localStorage.setItem('symptomReports', JSON.stringify(updatedReports));\n  };\n\n  const filteredReports = symptomReports.filter(report => {\n    const matchesSearch = \n      report.patientId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      report.symptomType.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      report.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || report.status === statusFilter;\n    const matchesSeverity = severityFilter === \"all\" || report.severity === severityFilter;\n    \n    return matchesSearch && matchesStatus && matchesSeverity;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">New</Badge>;\n      case 'under-review':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Reviewing</Badge>;\n      case 'reviewed':\n        return <Badge className=\"bg-green-100 text-green-800\">Reviewed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getSeverityBadge = (severity: string) => {\n    const level = parseInt(severity);\n    if (level <= 2) {\n      return <Badge className=\"bg-green-100 text-green-800\">Mild ({severity})</Badge>;\n    } else if (level <= 3) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Moderate ({severity})</Badge>;\n    } else {\n      return <Badge className=\"bg-red-100 text-red-800\">Severe ({severity})</Badge>;\n    }\n  };\n\n  const stats = {\n    total: symptomReports.length,\n    new: symptomReports.filter(r => r.status === 'submitted').length,\n    reviewing: symptomReports.filter(r => r.status === 'under-review').length,\n    reviewed: symptomReports.filter(r => r.status === 'reviewed').length,\n    highSeverity: symptomReports.filter(r => parseInt(r.severity) >= 4).length\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n              Investigator Dashboard\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Clinical Trial LUNG-2024-001 - Patient Safety Monitoring\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Total Reports</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">{stats.total}</p>\n                  </div>\n                  <AlertTriangle className=\"w-8 h-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-yellow-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">New Reports</p>\n                    <p className=\"text-2xl font-bold text-yellow-600\">{stats.new}</p>\n                  </div>\n                  <Calendar className=\"w-8 h-8 text-yellow-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Under Review</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">{stats.reviewing}</p>\n                  </div>\n                  <Clock className=\"w-8 h-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Reviewed</p>\n                    <p className=\"text-2xl font-bold text-green-600\">{stats.reviewed}</p>\n                  </div>\n                  <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-l-4 border-l-red-500\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">High Severity</p>\n                    <p className=\"text-2xl font-bold text-red-600\">{stats.highSeverity}</p>\n                  </div>\n                  <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <Tabs defaultValue=\"symptom-reports\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3 max-w-md\">\n              <TabsTrigger value=\"symptom-reports\">Symptom Reports</TabsTrigger>\n              <TabsTrigger value=\"patients\">Patients</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"symptom-reports\" className=\"space-y-6\">\n              \n              {/* Filters */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Filter className=\"w-5 h-5\" />\n                    <span>Filter Reports</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div className=\"relative\">\n                      <Search className=\"w-4 h-4 absolute left-3 top-3 text-gray-400\" />\n                      <Input\n                        placeholder=\"Search reports...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Filter by status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"submitted\">New</SelectItem>\n                        <SelectItem value=\"under-review\">Under Review</SelectItem>\n                        <SelectItem value=\"reviewed\">Reviewed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={severityFilter} onValueChange={setSeverityFilter}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Filter by severity\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Severities</SelectItem>\n                        <SelectItem value=\"1\">Severity 1-2 (Mild)</SelectItem>\n                        <SelectItem value=\"3\">Severity 3 (Moderate)</SelectItem>\n                        <SelectItem value=\"4\">Severity 4-5 (Severe)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Button variant=\"outline\" onClick={() => {\n                      setSearchTerm(\"\");\n                      setStatusFilter(\"all\");\n                      setSeverityFilter(\"all\");\n                    }}>\n                      Clear Filters\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Reports Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Patient Symptom Reports</CardTitle>\n                  <CardDescription>\n                    Review and manage patient-reported symptoms and adverse events\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {filteredReports.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Patient ID</TableHead>\n                            <TableHead>Date/Time</TableHead>\n                            <TableHead>Symptom</TableHead>\n                            <TableHead>Severity</TableHead>\n                            <TableHead>Status</TableHead>\n                            <TableHead>Medical Care</TableHead>\n                            <TableHead>Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {filteredReports.map((report) => (\n                            <TableRow key={report.id}>\n                              <TableCell className=\"font-medium\">{report.patientId}</TableCell>\n                              <TableCell>\n                                <div className=\"text-sm\">\n                                  <div>{new Date(report.date).toLocaleDateString()}</div>\n                                  <div className=\"text-gray-500\">{report.time}</div>\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div>\n                                  <div className=\"font-medium\">{report.symptomType}</div>\n                                  <div className=\"text-sm text-gray-500 max-w-xs truncate\">\n                                    {report.description}\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell>{getSeverityBadge(report.severity)}</TableCell>\n                              <TableCell>{getStatusBadge(report.status)}</TableCell>\n                              <TableCell>\n                                {report.seekMedicalCare ? (\n                                  <Badge className=\"bg-orange-100 text-orange-800\">Yes</Badge>\n                                ) : (\n                                  <Badge className=\"bg-gray-100 text-gray-800\">No</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex space-x-2\">\n                                  <Button size=\"sm\" variant=\"outline\">\n                                    <Eye className=\"w-4 h-4 mr-1\" />\n                                    View\n                                  </Button>\n                                  {report.status === 'submitted' && (\n                                    <Button \n                                      size=\"sm\" \n                                      onClick={() => updateReportStatus(report.id, 'under-review')}\n                                      className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                                    >\n                                      Review\n                                    </Button>\n                                  )}\n                                  {report.status === 'under-review' && (\n                                    <Button \n                                      size=\"sm\" \n                                      onClick={() => updateReportStatus(report.id, 'reviewed')}\n                                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                    >\n                                      Complete\n                                    </Button>\n                                  )}\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">No symptom reports found</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"patients\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Patient Management</CardTitle>\n                  <CardDescription>Enrolled patients and their study status</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">Patient management interface would be displayed here.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Safety Analytics</CardTitle>\n                  <CardDescription>Adverse event trends and safety signals</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">Analytics dashboard would be displayed here.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":15838},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Eye, EyeOff, Shield, ArrowRight, CheckCircle, User } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSignupSuccess, setIsSignupSuccess] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    agreeToTerms: false\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Mock login - set user as authenticated\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('userInfo', JSON.stringify({\n      email: formData.email,\n      firstName: formData.firstName || 'Patient',\n      lastName: formData.lastName || 'User',\n      id: 'P-001234'\n    }));\n    \n    // Redirect to dashboard\n    window.location.href = \"/dashboard\";\n  };\n\n  const handleSignup = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      alert(\"Passwords don't match!\");\n      return;\n    }\n    \n    if (!formData.agreeToTerms) {\n      alert(\"Please agree to the terms and conditions\");\n      return;\n    }\n\n    // Mock signup success\n    setIsSignupSuccess(true);\n  };\n\n  const handleSignupSuccess = () => {\n    // Set user as authenticated and redirect\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('userInfo', JSON.stringify({\n      email: formData.email,\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      id: 'P-' + Date.now().toString().slice(-6)\n    }));\n    \n    window.location.href = \"/dashboard\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-md mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-az-magenta/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <User className=\"w-8 h-8 text-az-magenta\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Clinical Trial Portal\n            </h1>\n            <p className=\"text-gray-600\">\n              Access your personalized dashboard and trial information\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-white border border-gray-200\">\n              <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\">Create Account</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader>\n                  <CardTitle>Welcome Back</CardTitle>\n                  <CardDescription>\n                    Sign in to access your clinical trial dashboard\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"login-email\">Email Address</Label>\n                      <Input\n                        id=\"login-email\"\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"login-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          value={formData.password}\n                          onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                          required\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"remember-me\" />\n                        <Label htmlFor=\"remember-me\" className=\"text-sm\">Remember me</Label>\n                      </div>\n                      <Button variant=\"link\" className=\"text-az-magenta hover:text-pink-700 p-0 h-auto\">\n                        Forgot password?\n                      </Button>\n                    </div>\n\n                    <Button type=\"submit\" className=\"w-full bg-az-magenta hover:bg-pink-700 text-white\">\n                      Sign In\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </form>\n\n                  <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>Demo Access:</strong> Use any email and password to sign in and explore the dashboard features.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"signup\">\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader>\n                  <CardTitle>Create Your Account</CardTitle>\n                  <CardDescription>\n                    Join our clinical trial platform to access personalized care\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSignup} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"firstName\">First Name</Label>\n                        <Input\n                          id=\"firstName\"\n                          placeholder=\"First name\"\n                          value={formData.firstName}\n                          onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\">Last Name</Label>\n                        <Input\n                          id=\"lastName\"\n                          placeholder=\"Last name\"\n                          value={formData.lastName}\n                          onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"signup-email\">Email Address</Label>\n                      <Input\n                        id=\"signup-email\"\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"(555) 123-4567\"\n                        value={formData.phone}\n                        onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"signup-password\">Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"signup-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a password\"\n                          value={formData.password}\n                          onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                          required\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        value={formData.confirmPassword}\n                        onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start space-x-2\">\n                        <Checkbox \n                          id=\"terms\" \n                          checked={formData.agreeToTerms}\n                          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, agreeToTerms: !!checked }))}\n                        />\n                        <Label htmlFor=\"terms\" className=\"text-sm leading-relaxed\">\n                          I agree to the <a href=\"#\" className=\"text-az-magenta hover:underline\">Terms of Service</a> and <a href=\"#\" className=\"text-az-magenta hover:underline\">Privacy Policy</a>\n                        </Label>\n                      </div>\n                    </div>\n\n                    <Button type=\"submit\" className=\"w-full bg-az-magenta hover:bg-pink-700 text-white\">\n                      Create Account\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </form>\n\n                  <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Shield className=\"w-5 h-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <div>\n                        <h4 className=\"font-medium text-green-900 text-sm\">Your Privacy is Protected</h4>\n                        <p className=\"text-xs text-green-800 mt-1\">\n                          All personal information is encrypted and complies with HIPAA regulations for clinical research.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n        </div>\n      </main>\n      \n      <Footer />\n\n      {/* Signup Success Dialog */}\n      <Dialog open={isSignupSuccess} onOpenChange={setIsSignupSuccess}>\n        <DialogContent className=\"max-w-md\">\n          <div className=\"text-center py-4\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            \n            <DialogTitle className=\"text-xl text-green-700 mb-3\">\n              Account Created Successfully!\n            </DialogTitle>\n            \n            <DialogDescription className=\"text-gray-600 mb-6\">\n              Welcome to the AstraZeneca Clinical Trials Portal. You can now access your personalized dashboard and trial information.\n            </DialogDescription>\n\n            <Button \n              onClick={handleSignupSuccess}\n              className=\"w-full bg-az-magenta hover:bg-pink-700 text-white\"\n            >\n              Go to Dashboard\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":13641},"client/src/pages/medical-info.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileUp, Database, Download, CheckCircle, AlertTriangle, User, Calendar, MapPin } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport MedicalFileUpload from \"@/components/medical-file-upload\";\nimport EHRConnection from \"@/components/ehr-connection\";\n\nexport interface MedicalFile {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  uploadDate: string;\n  category: string;\n  status: 'uploaded' | 'processing' | 'reviewed';\n}\n\nexport default function MedicalInfo() {\n  const [uploadedFiles, setUploadedFiles] = useState<MedicalFile[]>([\n    {\n      id: '1',\n      name: 'blood_work_results_2024.pdf',\n      type: 'application/pdf',\n      size: 2.4 * 1024 * 1024,\n      uploadDate: '2024-08-15',\n      category: 'Lab Results',\n      status: 'reviewed'\n    },\n    {\n      id: '2',\n      name: 'ct_scan_report.pdf',\n      type: 'application/pdf',\n      size: 5.1 * 1024 * 1024,\n      uploadDate: '2024-08-12',\n      category: 'Imaging',\n      status: 'processing'\n    }\n  ]);\n\n  const [ehrConnected, setEhrConnected] = useState(false);\n  const [ehrData, setEhrData] = useState<any>(null);\n\n  const handleFileUpload = (files: File[]) => {\n    const newFiles: MedicalFile[] = files.map(file => ({\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      type: file.type,\n      size: file.size,\n      uploadDate: new Date().toISOString().split('T')[0],\n      category: 'Medical Records',\n      status: 'uploaded'\n    }));\n    \n    setUploadedFiles(prev => [...prev, ...newFiles]);\n  };\n\n  const handleEHRConnect = () => {\n    setEhrConnected(true);\n    // Mock FHIR patient data\n    setEhrData({\n      resourceType: \"Patient\",\n      id: \"patient-12345\",\n      active: true,\n      name: [{\n        use: \"official\",\n        family: \"Johnson\",\n        given: [\"Sarah\", \"Elizabeth\"]\n      }],\n      telecom: [{\n        system: \"phone\",\n        value: \"+1-555-0123\",\n        use: \"mobile\"\n      }, {\n        system: \"email\",\n        value: \"sarah.johnson@email.com\",\n        use: \"home\"\n      }],\n      gender: \"female\",\n      birthDate: \"1978-03-15\",\n      address: [{\n        use: \"home\",\n        line: [\"123 Main Street\", \"Apt 4B\"],\n        city: \"Boston\",\n        state: \"MA\",\n        postalCode: \"02101\",\n        country: \"US\"\n      }],\n      communication: [{\n        language: {\n          coding: [{\n            system: \"urn:ietf:bcp:47\",\n            code: \"en\",\n            display: \"English\"\n          }]\n        },\n        preferred: true\n      }],\n      conditions: [\n        {\n          resourceType: \"Condition\",\n          id: \"condition-1\",\n          clinicalStatus: \"active\",\n          code: {\n            coding: [{\n              system: \"http://snomed.info/sct\",\n              code: \"363346000\",\n              display: \"Malignant neoplasm of lung\"\n            }]\n          },\n          onsetDateTime: \"2024-01-15\"\n        }\n      ],\n      medications: [\n        {\n          resourceType: \"MedicationStatement\",\n          id: \"medication-1\",\n          status: \"active\",\n          medicationCodeableConcept: {\n            coding: [{\n              system: \"http://www.nlm.nih.gov/research/umls/rxnorm\",\n              code: \"152923\",\n              display: \"Carboplatin 10 MG/ML Injectable Solution\"\n            }]\n          },\n          effectiveDateTime: \"2024-02-01\"\n        }\n      ],\n      observations: [\n        {\n          resourceType: \"Observation\",\n          id: \"obs-1\",\n          status: \"final\",\n          code: {\n            coding: [{\n              system: \"http://loinc.org\",\n              code: \"33747-0\",\n              display: \"General health status\"\n            }]\n          },\n          valueString: \"Stable\",\n          effectiveDateTime: \"2024-08-10\"\n        }\n      ]\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'uploaded':\n        return <FileUp className=\"w-4 h-4 text-blue-600\" />;\n      case 'processing':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n      case 'reviewed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      default:\n        return <FileUp className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'uploaded':\n        return 'bg-blue-100 text-blue-800';\n      case 'processing':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewed':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Medical Information Portal\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Upload your medical records and connect your Electronic Health Record (EHR) \n              to streamline your clinical trial application process.\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"upload\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-2 max-w-md mx-auto\">\n              <TabsTrigger value=\"upload\" className=\"flex items-center space-x-2\">\n                <FileUp className=\"w-4 h-4\" />\n                <span>Upload Records</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"ehr\" className=\"flex items-center space-x-2\">\n                <Database className=\"w-4 h-4\" />\n                <span>Connect EHR</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"upload\" className=\"space-y-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                \n                {/* File Upload Section */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <FileUp className=\"w-5 h-5\" />\n                      <span>Upload Medical Records</span>\n                    </CardTitle>\n                    <CardDescription className=\"text-pink-100\">\n                      Upload your recent medical records, lab results, and imaging reports\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <MedicalFileUpload onFilesUploaded={handleFileUpload} />\n                  </CardContent>\n                </Card>\n\n                {/* Uploaded Files List */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle>Uploaded Files</CardTitle>\n                    <CardDescription>\n                      Your uploaded medical documents and their review status\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    {uploadedFiles.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {uploadedFiles.map((file) => (\n                          <div key={file.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-start space-x-3\">\n                                {getStatusIcon(file.status)}\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-medium text-gray-900\">{file.name}</h4>\n                                  <p className=\"text-sm text-gray-500\">\n                                    {file.category} • {formatFileSize(file.size)}\n                                  </p>\n                                  <p className=\"text-xs text-gray-400\">\n                                    Uploaded on {new Date(file.uploadDate).toLocaleDateString()}\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge className={getStatusColor(file.status)}>\n                                  {file.status}\n                                </Badge>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Download className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <FileUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-500\">No files uploaded yet</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Guidelines */}\n              <Card className=\"border-l-4 border-l-az-magenta\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Upload Guidelines</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Recommended Documents</h4>\n                      <ul className=\"space-y-2 text-sm text-gray-600\">\n                        <li>• Recent blood work and lab results</li>\n                        <li>• Pathology reports</li>\n                        <li>• Imaging studies (CT, MRI, X-rays)</li>\n                        <li>• Previous treatment records</li>\n                        <li>• Medication history</li>\n                        <li>• Physician consultation notes</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">File Requirements</h4>\n                      <ul className=\"space-y-2 text-sm text-gray-600\">\n                        <li>• Supported formats: PDF, JPEG, PNG</li>\n                        <li>• Maximum file size: 25MB per file</li>\n                        <li>• Documents must be clearly legible</li>\n                        <li>• All personal information should be visible</li>\n                        <li>• Recent records (within last 6 months preferred)</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"ehr\" className=\"space-y-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                \n                {/* EHR Connection */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Database className=\"w-5 h-5\" />\n                      <span>Connect EHR System</span>\n                    </CardTitle>\n                    <CardDescription className=\"text-pink-100\">\n                      Securely connect your healthcare provider's EHR system\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    <EHRConnection \n                      isConnected={ehrConnected}\n                      onConnect={handleEHRConnect}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* EHR Data Display */}\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle>Patient Data (FHIR)</CardTitle>\n                    <CardDescription>\n                      {ehrConnected ? \"Connected patient data from EHR system\" : \"No EHR connection established\"}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-6\">\n                    {ehrConnected && ehrData ? (\n                      <div className=\"space-y-6\">\n                        {/* Patient Demographics */}\n                        <div className=\"border rounded-lg p-4 bg-green-50\">\n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            <User className=\"w-5 h-5 text-green-600\" />\n                            <h4 className=\"font-semibold text-green-800\">Patient Demographics</h4>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                            <div>\n                              <span className=\"text-gray-600\">Name:</span>\n                              <span className=\"ml-2 font-medium\">\n                                {ehrData.name[0].given.join(' ')} {ehrData.name[0].family}\n                              </span>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-600\">Gender:</span>\n                              <span className=\"ml-2 font-medium capitalize\">{ehrData.gender}</span>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-600\">Date of Birth:</span>\n                              <span className=\"ml-2 font-medium\">{ehrData.birthDate}</span>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-600\">ID:</span>\n                              <span className=\"ml-2 font-medium\">{ehrData.id}</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Current Conditions */}\n                        <div className=\"border rounded-lg p-4 bg-blue-50\">\n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            <AlertTriangle className=\"w-5 h-5 text-blue-600\" />\n                            <h4 className=\"font-semibold text-blue-800\">Active Conditions</h4>\n                          </div>\n                          {ehrData.conditions.map((condition: any, index: number) => (\n                            <div key={index} className=\"text-sm\">\n                              <span className=\"font-medium\">{condition.code.coding[0].display}</span>\n                              <span className=\"ml-2 text-gray-600\">\n                                (Since: {new Date(condition.onsetDateTime).toLocaleDateString()})\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Current Medications */}\n                        <div className=\"border rounded-lg p-4 bg-yellow-50\">\n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            <Calendar className=\"w-5 h-5 text-yellow-600\" />\n                            <h4 className=\"font-semibold text-yellow-800\">Current Medications</h4>\n                          </div>\n                          {ehrData.medications.map((medication: any, index: number) => (\n                            <div key={index} className=\"text-sm\">\n                              <span className=\"font-medium\">{medication.medicationCodeableConcept.coding[0].display}</span>\n                              <span className=\"ml-2 text-gray-600\">\n                                (Started: {new Date(medication.effectiveDateTime).toLocaleDateString()})\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Download Complete FHIR Record\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Database className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-500\">Connect your EHR to view patient data</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":17731},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/registration.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, ArrowLeft, ArrowRight, Upload, Shield } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport DemographicsForm from \"@/components/demographics-form\";\nimport OTPVerification from \"@/components/otp-verification\";\nimport IDVerification from \"@/components/id-verification\";\n\nexport interface RegistrationData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  gender: string;\n  ethnicity: string;\n  address: string;\n  emergencyContact: string;\n  emergencyPhone: string;\n  otpCode: string;\n  idDocument: File | null;\n}\n\nexport default function Registration() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<Partial<RegistrationData>>({});\n  const [isComplete, setIsComplete] = useState(false);\n\n  const steps = [\n    { id: 1, title: \"Demographics\", description: \"Personal information and contact details\" },\n    { id: 2, title: \"Verification\", description: \"Phone verification via SMS\" },\n    { id: 3, title: \"ID Upload\", description: \"Identity document verification\" },\n    { id: 4, title: \"Complete\", description: \"Registration successful\" }\n  ];\n\n  const progress = (currentStep / steps.length) * 100;\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = () => {\n    setIsComplete(true);\n    setCurrentStep(4);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Clinical Trial Registration\n            </h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Complete your registration to participate in clinical trials. \n              Your information is secure and will only be used for research purposes.\n            </p>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mb-8\">\n            <div className=\"flex justify-between items-center mb-4\">\n              {steps.map((step, index) => (\n                <div key={step.id} className=\"flex items-center\">\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                    currentStep > step.id \n                      ? 'bg-az-gold text-az-magenta' \n                      : currentStep === step.id \n                        ? 'bg-az-magenta text-white' \n                        : 'bg-gray-300 text-gray-600'\n                  }`}>\n                    {currentStep > step.id ? <CheckCircle className=\"w-4 h-4\" /> : step.id}\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className={`w-16 h-1 mx-2 ${\n                      currentStep > step.id ? 'bg-az-gold' : 'bg-gray-300'\n                    }`} />\n                  )}\n                </div>\n              ))}\n            </div>\n            <Progress value={progress} className=\"h-2 bg-gray-200\">\n              <div \n                className=\"h-full bg-gradient-to-r from-az-magenta to-az-gold transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              />\n            </Progress>\n          </div>\n\n          {/* Current Step Content */}\n          <Card className=\"shadow-lg border-0\">\n            {!isComplete && (\n              <CardHeader className=\"bg-gradient-to-r from-az-magenta to-pink-700 text-white rounded-t-lg\">\n                <CardTitle className=\"text-xl\">{steps[currentStep - 1]?.title}</CardTitle>\n                <CardDescription className=\"text-pink-100\">\n                  {steps[currentStep - 1]?.description}\n                </CardDescription>\n              </CardHeader>\n            )}\n            <CardContent className=\"p-8\">\n              {currentStep === 1 && (\n                <DemographicsForm \n                  onNext={handleNext}\n                  formData={formData}\n                  setFormData={setFormData}\n                />\n              )}\n              \n              {currentStep === 2 && (\n                <OTPVerification \n                  onNext={handleNext}\n                  onBack={handleBack}\n                  formData={formData}\n                  setFormData={setFormData}\n                />\n              )}\n              \n              {currentStep === 3 && (\n                <IDVerification \n                  onComplete={handleComplete}\n                  onBack={handleBack}\n                  formData={formData}\n                  setFormData={setFormData}\n                />\n              )}\n              \n              {currentStep === 4 && isComplete && (\n                <div className=\"text-center space-y-6\">\n                  <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                    <CheckCircle className=\"w-10 h-10 text-green-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-green-700 mb-2\">Registration Complete!</h3>\n                    <p className=\"text-gray-600 mb-6\">\n                      Thank you for registering. Our clinical research team will review your information \n                      and contact you within 2-3 business days to discuss next steps.\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-green-50 p-6 rounded-lg text-left\">\n                    <h4 className=\"font-semibold text-green-800 mb-3\">What happens next?</h4>\n                    <ul className=\"space-y-2 text-green-700\">\n                      <li className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Medical records review by our research team</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Initial consultation call to discuss trial details</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Comprehensive medical screening if eligible</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                        <span>Informed consent process and trial enrollment</span>\n                      </li>\n                    </ul>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-4\">\n                    <Button className=\"bg-az-magenta hover:bg-pink-700 text-white flex-1\">\n                      View Registration Status\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white flex-1\"\n                      onClick={() => window.location.href = '/'}\n                    >\n                      Return to Trials\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Security Notice */}\n          {!isComplete && (\n            <div className=\"mt-6 flex items-center justify-center space-x-2 text-sm text-gray-600\">\n              <Shield className=\"w-4 h-4 text-az-magenta\" />\n              <span>Your information is protected by 256-bit SSL encryption</span>\n            </div>\n          )}\n\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":8377},"client/src/pages/trial-detail.tsx":{"content":"import { useRoute } from \"wouter\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar, Users, MapPin, Clock, Target, Shield, Phone, FileText, ArrowRight, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\ninterface TrialDetails {\n  id: string;\n  title: string;\n  phase: string;\n  condition: string;\n  sponsor: string;\n  location: string;\n  description: string;\n  enrollment: { current: number; target: number };\n  duration: string;\n  primaryEndpoint: string;\n  secondaryEndpoints: string[];\n  inclusionCriteria: string[];\n  exclusionCriteria: string[];\n  schedule: Array<{ visit: string; timepoint: string; procedures: string }>;\n  investigator: { name: string; title: string; phone: string; email: string };\n  studyCoordinator: { name: string; phone: string; email: string };\n}\n\nexport default function TrialDetail() {\n  const [, params] = useRoute(\"/trial/:id\");\n  const [showRegistrationDialog, setShowRegistrationDialog] = useState(false);\n  \n  // Mock trial data - in a real app this would come from API\n  const trialData: TrialDetails = {\n    id: params?.id || \"1\",\n    title: \"Novel Oncology Treatment for Advanced Lung Cancer\",\n    phase: \"Phase II\",\n    condition: \"Non-Small Cell Lung Cancer (NSCLC)\",\n    sponsor: \"AstraZeneca\",\n    location: \"Multiple Sites - United States\",\n    description: \"This Phase II clinical trial evaluates the safety and efficacy of an innovative targeted therapy for patients with advanced non-small cell lung cancer who have not responded to standard treatments. The study drug targets specific genetic mutations commonly found in lung cancer cells, potentially offering improved outcomes with fewer side effects.\",\n    enrollment: { current: 127, target: 250 },\n    duration: \"24 months\",\n    primaryEndpoint: \"Progression-free survival at 12 months\",\n    secondaryEndpoints: [\n      \"Overall survival at 24 months\",\n      \"Objective response rate (ORR)\",\n      \"Safety and tolerability profile\",\n      \"Quality of life measures (EORTC QLQ-C30)\",\n      \"Biomarker analysis of tumor samples\"\n    ],\n    inclusionCriteria: [\n      \"Age 18-75 years at time of consent\",\n      \"Histologically confirmed advanced or metastatic NSCLC\",\n      \"ECOG performance status 0-2\",\n      \"Adequate organ and bone marrow function\",\n      \"Life expectancy ≥ 12 weeks\",\n      \"Previous treatment with at least one line of systemic therapy\",\n      \"Measurable disease per RECIST 1.1 criteria\",\n      \"Signed informed consent\"\n    ],\n    exclusionCriteria: [\n      \"Previous treatment with similar targeted agents\",\n      \"Active or untreated CNS metastases\",\n      \"Uncontrolled intercurrent illness or active infection\",\n      \"Pregnancy or breastfeeding\",\n      \"History of severe allergic reactions to study drug components\",\n      \"Major surgical procedure within 4 weeks of enrollment\",\n      \"Concurrent participation in other therapeutic trials\"\n    ],\n    schedule: [\n      { visit: \"Screening\", timepoint: \"Day -28 to -1\", procedures: \"Consent, medical history, physical exam, labs, imaging, biomarkers\" },\n      { visit: \"Baseline/Randomization\", timepoint: \"Day 1\", procedures: \"Randomization, first dose administration, safety assessment\" },\n      { visit: \"Cycle 1 Follow-up\", timepoint: \"Day 15\", procedures: \"Safety labs, adverse event assessment, vital signs\" },\n      { visit: \"End of Cycle 1\", timepoint: \"Day 29\", procedures: \"Safety assessment, dose modifications if needed\" },\n      { visit: \"Efficacy Assessment\", timepoint: \"Every 8 weeks\", procedures: \"CT/MRI imaging, tumor assessment, QOL questionnaires\" },\n      { visit: \"End of Treatment\", timepoint: \"Final dose\", procedures: \"Final safety assessment, tumor biopsy if feasible\" },\n      { visit: \"Safety Follow-up\", timepoint: \"30 days post-treatment\", procedures: \"Safety assessment, adverse event follow-up\" },\n      { visit: \"Survival Follow-up\", timepoint: \"Every 12 weeks\", procedures: \"Survival status, subsequent therapies\" }\n    ],\n    investigator: {\n      name: \"Dr. Sarah Smith, MD, PhD\",\n      title: \"Principal Investigator, Oncology\",\n      phone: \"(555) 123-4567\",\n      email: \"sarah.smith@clinicalresearch.com\"\n    },\n    studyCoordinator: {\n      name: \"Jennifer Martinez, RN\",\n      phone: \"(555) 123-4568\",\n      email: \"jennifer.martinez@clinicalresearch.com\"\n    }\n  };\n\n  const handleRegisterClick = () => {\n    setShowRegistrationDialog(true);\n  };\n\n  const handleProceedToEligibility = () => {\n    setShowRegistrationDialog(false);\n    window.location.href = \"/eligibility\";\n  };\n\n  const enrollmentPercentage = (trialData.enrollment.current / trialData.enrollment.target) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600 mb-4\">\n              <a href=\"/\" className=\"hover:text-az-magenta\">Clinical Trials</a>\n              <span>/</span>\n              <span className=\"text-gray-400\">Trial Details</span>\n            </div>\n            \n            <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Badge className=\"bg-phase-2 text-white\">{trialData.phase}</Badge>\n                  <Badge variant=\"outline\" className=\"border-az-magenta text-az-magenta\">\n                    {trialData.condition}\n                  </Badge>\n                </div>\n                <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n                  {trialData.title}\n                </h1>\n                <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Shield className=\"w-4 h-4\" />\n                    <span>{trialData.sponsor}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span>{trialData.location}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>{trialData.duration}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button \n                  variant=\"outline\"\n                  className=\"border-az-magenta text-az-magenta hover:bg-az-magenta hover:text-white\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Download Protocol\n                </Button>\n                <Button \n                  onClick={handleRegisterClick}\n                  className=\"bg-az-magenta hover:bg-pink-700 text-white\"\n                >\n                  <ArrowRight className=\"w-4 h-4 mr-2\" />\n                  Register for Trial\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Enrollment Progress */}\n          <Card className=\"mb-8 shadow-lg border-0\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-az-magenta\" />\n                <span>Enrollment Status</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-sm text-gray-600\">Current Enrollment</span>\n                <span className=\"font-medium\">\n                  {trialData.enrollment.current} / {trialData.enrollment.target} participants\n                </span>\n              </div>\n              <Progress value={enrollmentPercentage} className=\"h-3 mb-2\" />\n              <p className=\"text-xs text-gray-500\">\n                {Math.round(enrollmentPercentage)}% enrolled • Actively recruiting participants\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Main Content Tabs */}\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-5 max-w-3xl mx-auto bg-white border border-gray-200\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"eligibility\">Eligibility</TabsTrigger>\n              <TabsTrigger value=\"schedule\">Schedule</TabsTrigger>\n              <TabsTrigger value=\"team\">Study Team</TabsTrigger>\n              <TabsTrigger value=\"location\">Locations</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                \n                {/* Study Description */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <Card className=\"shadow-lg border-0\">\n                    <CardHeader>\n                      <CardTitle>Study Description</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-700 leading-relaxed\">{trialData.description}</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"shadow-lg border-0\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Target className=\"w-5 h-5 text-az-magenta\" />\n                        <span>Study Objectives</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Primary Endpoint</h4>\n                        <p className=\"text-gray-600\">{trialData.primaryEndpoint}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Secondary Endpoints</h4>\n                        <ul className=\"space-y-1\">\n                          {trialData.secondaryEndpoints.map((endpoint, index) => (\n                            <li key={index} className=\"flex items-start space-x-2 text-gray-600\">\n                              <div className=\"w-1.5 h-1.5 bg-az-magenta rounded-full mt-2 flex-shrink-0\" />\n                              <span>{endpoint}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Quick Facts */}\n                <div className=\"space-y-6\">\n                  <Card className=\"shadow-lg border-0\">\n                    <CardHeader>\n                      <CardTitle>Quick Facts</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 gap-3\">\n                        <div className=\"p-3 bg-gray-50 rounded-lg\">\n                          <p className=\"text-xs text-gray-600 uppercase tracking-wide\">Study Phase</p>\n                          <p className=\"font-medium text-gray-900\">{trialData.phase}</p>\n                        </div>\n                        <div className=\"p-3 bg-gray-50 rounded-lg\">\n                          <p className=\"text-xs text-gray-600 uppercase tracking-wide\">Condition</p>\n                          <p className=\"font-medium text-gray-900\">{trialData.condition}</p>\n                        </div>\n                        <div className=\"p-3 bg-gray-50 rounded-lg\">\n                          <p className=\"text-xs text-gray-600 uppercase tracking-wide\">Study Duration</p>\n                          <p className=\"font-medium text-gray-900\">{trialData.duration}</p>\n                        </div>\n                        <div className=\"p-3 bg-gray-50 rounded-lg\">\n                          <p className=\"text-xs text-gray-600 uppercase tracking-wide\">Sponsor</p>\n                          <p className=\"font-medium text-gray-900\">{trialData.sponsor}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"shadow-lg border-0 border-l-4 border-l-green-500\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-3\">\n                        <CheckCircle className=\"w-6 h-6 text-green-600 flex-shrink-0 mt-1\" />\n                        <div>\n                          <h4 className=\"font-medium text-green-900 mb-2\">Actively Recruiting</h4>\n                          <p className=\"text-sm text-green-800\">\n                            This study is currently enrolling participants. All study-related care is provided at no cost to participants.\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"eligibility\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"text-green-700 flex items-center space-x-2\">\n                      <CheckCircle className=\"w-5 h-5\" />\n                      <span>Inclusion Criteria</span>\n                    </CardTitle>\n                    <CardDescription>Requirements to participate in this study</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-3\">\n                      {trialData.inclusionCriteria.map((criteria, index) => (\n                        <li key={index} className=\"flex items-start space-x-3\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-700\">{criteria}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"text-red-700 flex items-center space-x-2\">\n                      <AlertTriangle className=\"w-5 h-5\" />\n                      <span>Exclusion Criteria</span>\n                    </CardTitle>\n                    <CardDescription>Conditions that prevent participation</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-3\">\n                      {trialData.exclusionCriteria.map((criteria, index) => (\n                        <li key={index} className=\"flex items-start space-x-3\">\n                          <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-700\">{criteria}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card className=\"shadow-lg border-0 bg-az-magenta/5 border-az-magenta/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <h3 className=\"text-lg font-semibold text-az-magenta mb-3\">\n                    Think you might be eligible?\n                  </h3>\n                  <p className=\"text-gray-700 mb-4\">\n                    Complete our quick eligibility screening to see if this study might be right for you.\n                  </p>\n                  <Button \n                    onClick={handleRegisterClick}\n                    className=\"bg-az-magenta hover:bg-pink-700 text-white\"\n                  >\n                    Start Eligibility Check\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"schedule\" className=\"space-y-6\">\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Calendar className=\"w-5 h-5 text-az-magenta\" />\n                    <span>Study Visit Schedule</span>\n                  </CardTitle>\n                  <CardDescription>Timeline of study visits and procedures</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"text-left py-3 text-sm font-medium text-gray-600\">Visit</th>\n                          <th className=\"text-left py-3 text-sm font-medium text-gray-600\">Timepoint</th>\n                          <th className=\"text-left py-3 text-sm font-medium text-gray-600\">Procedures</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {trialData.schedule.map((visit, index) => (\n                          <tr key={index} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                            <td className=\"py-4 text-sm font-medium text-gray-900\">{visit.visit}</td>\n                            <td className=\"py-4 text-sm text-gray-600\">{visit.timepoint}</td>\n                            <td className=\"py-4 text-sm text-gray-600\">{visit.procedures}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"team\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle>Principal Investigator</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{trialData.investigator.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{trialData.investigator.title}</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Phone className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-sm\">{trialData.investigator.phone}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm\">✉️</span>\n                          <span className=\"text-sm\">{trialData.investigator.email}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-lg border-0\">\n                  <CardHeader>\n                    <CardTitle>Study Coordinator</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{trialData.studyCoordinator.name}</h4>\n                        <p className=\"text-sm text-gray-600\">Research Coordinator</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Phone className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-sm\">{trialData.studyCoordinator.phone}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm\">✉️</span>\n                          <span className=\"text-sm\">{trialData.studyCoordinator.email}</span>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">\n                        Available Mon-Fri 8:00 AM - 5:00 PM for questions about the study\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card className=\"shadow-lg border-0 bg-yellow-50 border-yellow-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-1\" />\n                    <div>\n                      <h4 className=\"font-medium text-yellow-900 mb-2\">24/7 Emergency Contact</h4>\n                      <p className=\"text-sm text-yellow-800 mb-2\">\n                        <strong>Emergency Line:</strong> (555) 999-EMRG\n                      </p>\n                      <p className=\"text-xs text-yellow-700\">\n                        For urgent medical concerns related to the study outside of business hours\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"location\" className=\"space-y-6\">\n              <Card className=\"shadow-lg border-0\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <MapPin className=\"w-5 h-5 text-az-magenta\" />\n                    <span>Study Locations</span>\n                  </CardTitle>\n                  <CardDescription>Clinical research centers participating in this trial</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"p-4 border rounded-lg\">\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Primary Research Center</h4>\n                      <div className=\"space-y-2 text-sm text-gray-600\">\n                        <p><strong>Address:</strong> 123 Clinical Research Drive, Medical Center, NY 10001</p>\n                        <p><strong>Phone:</strong> (555) 123-4567</p>\n                        <p><strong>Hours:</strong> Mon-Fri 8:00 AM - 6:00 PM</p>\n                        <p><strong>Parking:</strong> Free parking available for study participants</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-4 border rounded-lg\">\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Satellite Location</h4>\n                      <div className=\"space-y-2 text-sm text-gray-600\">\n                        <p><strong>Address:</strong> 456 Healthcare Blvd, Suite 200, Brooklyn, NY 11201</p>\n                        <p><strong>Phone:</strong> (555) 123-4568</p>\n                        <p><strong>Hours:</strong> Tue, Thu 9:00 AM - 4:00 PM</p>\n                        <p><strong>Note:</strong> Limited visits available at this location</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n        </div>\n      </main>\n      \n      <Footer />\n\n      {/* Registration Dialog */}\n      <Dialog open={showRegistrationDialog} onOpenChange={setShowRegistrationDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Ready to Join This Study?</DialogTitle>\n            <DialogDescription>\n              To participate in this clinical trial, we'll need to verify your eligibility first.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-az-magenta/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-az-magenta\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Next Steps</h3>\n              <ol className=\"text-sm text-gray-600 space-y-2 text-left max-w-sm mx-auto\">\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"bg-az-magenta text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5\">1</span>\n                  <span>Complete eligibility screening questionnaire</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"bg-az-magenta text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5\">2</span>\n                  <span>Schedule screening visit if eligible</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <span className=\"bg-az-magenta text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5\">3</span>\n                  <span>Begin study participation if qualified</span>\n                </li>\n              </ol>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={() => setShowRegistrationDialog(false)} className=\"flex-1\">\n              Maybe Later\n            </Button>\n            <Button onClick={handleProceedToEligibility} className=\"bg-az-magenta hover:bg-pink-700 text-white flex-1\">\n              Check Eligibility\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":26650},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }","size_bytes":1055},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }","size_bytes":1466},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }","size_bytes":1138},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}